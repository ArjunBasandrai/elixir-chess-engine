#pragma once

#include "board/board.h"

namespace elixir {
    constexpr inline EvalScore S(Score o_score, Score e_score) {
        return static_cast<EvalScore>(((I32) e_score << 16) + (I32) o_score);
    }

    constexpr inline Score O(EvalScore score) {
        return static_cast<Score>((I16) score);
    }

    constexpr inline Score E(EvalScore score) {
        return static_cast<Score>((I16) ((score + 0x8000) >> 16));
    }

    namespace eval {
        constexpr int piece_values[7] = {100, 300, 350, 500, 900, 20000, 0};
        constexpr EvalScore material_score[7] = {S(79, 112), S(284, 347), S(296, 340), S(392, 615), S(757, 1147), S(0, 0), S(0, 0)};
        constexpr EvalScore psqt[6][64] = {
            {
                S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), 
                S(54, 165), S(76, 158), S(54, 158), S(83, 111), S(67, 106), S(51, 117), S(-13, 161), 
                S(-38, 175), S(-21, 107), S(-8, 115), S(23, 82), S(28, 61), S(32, 53), S(53, 38), 
                S(33, 84), S(-8, 82), S(-36, 40), S(-12, 29), S(-9, 10), S(-7, 1), S(13, -7), 
                S(4, -4), S(8, 14), S(-14, 15), S(-46, 15), S(-20, 13), S(-21, -3), S(-5, -7), 
                S(-5, -9), S(-12, -7), S(-4, 3), S(-26, -3), S(-48, 9), S(-24, 11), S(-24, -5), 
                S(-23, 6), S(-9, 0), S(-19, -3), S(9, 1), S(-19, -7), S(-48, 14), S(-23, 15), 
                S(-28, 2), S(-37, 7), S(-18, 12), S(-4, 1), S(18, 1), S(-26, -6), S(0, 0), 
                S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0)
            }, 
            {
                S(-160, -88), S(-129, -28), S(-66, -15), S(-34, -22), S(-4, -19), S(-59, -42), S(-112, -21), S(-107, -109), 
                S(-31, -35), S(-14, -14), S(9, -7), S(26, -8), S(10, -15), S(71, -30), S(-15, -18), 
                S(6, -50), S(-17, -19), S(15, -5), S(32, 10), S(43, 11), S(79, -3), S(80, -8), 
                S(38, -15), S(8, -29), S(-21, -8), S(-8, 11), S(15, 22), S(35, 24), S(18, 25), 
                S(42, 19), S(1, 10), S(11, -16), S(-34, -7), S(-18, 1), S(-5, 24), S(-3, 24), 
                S(4, 27), S(0, 17), S(-1, 3), S(-23, -16), S(-52, -23), S(-30, -4), S(-17, 4), 
                S(-14, 17), S(-3, 16), S(-13, 0), S(-9, -10), S(-36, -21), S(-64, -32), S(-53, -16), 
                S(-37, -7), S(-26, -4), S(-24, -5), S(-22, -9), S(-35, -25), S(-38, -21), S(-106, -39), 
                S(-54, -51), S(-67, -23), S(-53, -19), S(-49, -18), S(-37, -29), S(-52, -44), S(-77, -50)
            }, 
            {
                S(-25, 6), S(-43, 17), S(-32, 14), S(-72, 27), S(-62, 21), S(-44, 12), S(-15, 5), S(-52, 3), 
                S(-9, -6), S(13, 12), S(8, 16), S(-8, 19), S(19, 10), S(19, 8), S(10, 16), 
                S(0, -7), S(0, 22), S(23, 16), S(23, 27), S(46, 16), S(33, 21), S(63, 22), 
                S(40, 15), S(28, 15), S(-7, 17), S(5, 33), S(26, 27), S(36, 41), S(34, 33), 
                S(29, 31), S(6, 30), S(-7, 17), S(-14, 13), S(-1, 30), S(4, 38), S(24, 34), 
                S(20, 34), S(6, 33), S(-1, 27), S(-6, 3), S(-3, 13), S(2, 23), S(2, 30), 
                S(5, 30), S(6, 34), S(1, 30), S(4, 14), S(7, 3), S(-1, 7), S(0, 8), 
                S(9, 6), S(-10, 21), S(-3, 22), S(8, 11), S(14, 13), S(2, -11), S(-22, -8), 
                S(-3, 8), S(-18, -10), S(-27, 10), S(-22, 7), S(-23, 7), S(0, -6), S(-12, -21)
            }, 
            {
                S(12, 16), S(3, 24), S(10, 32), S(15, 28), S(33, 20), S(49, 9), S(32, 12), S(51, 6), 
                S(-5, 16), S(-6, 28), S(11, 32), S(31, 24), S(17, 24), S(45, 9), S(32, 6), 
                S(62, -7), S(-26, 17), S(-5, 20), S(-3, 21), S(0, 19), S(26, 6), S(27, 0), 
                S(64, -7), S(42, -11), S(-41, 19), S(-28, 18), S(-26, 26), S(-17, 23), S(-12, 8), 
                S(-11, 2), S(-3, 0), S(0, -6), S(-59, 12), S(-57, 17), S(-47, 19), S(-35, 18), 
                S(-35, 13), S(-50, 11), S(-27, 0), S(-35, -5), S(-66, 8), S(-57, 8), S(-48, 7), 
                S(-49, 12), S(-44, 7), S(-46, 0), S(-13, -19), S(-34, -19), S(-69, 3), S(-57, 6), 
                S(-42, 7), S(-46, 9), S(-41, 1), S(-40, -2), S(-23, -12), S(-51, -6), S(-50, -1), 
                S(-49, 7), S(-40, 15), S(-35, 13), S(-31, 6), S(-40, 1), S(-26, -2), S(-49, -10)
            }, 
            {
                S(-36, 39), S(-29, 52), S(0, 68), S(32, 55), S(33, 52), S(37, 45), S(55, 2), S(3, 32), 
                S(0, 4), S(-21, 46), S(-15, 79), S(-22, 97), S(-17, 114), S(19, 74), S(-1, 58), 
                S(41, 34), S(0, 15), S(-2, 32), S(-4, 73), S(11, 75), S(16, 88), S(56, 69), 
                S(57, 33), S(54, 21), S(-16, 25), S(-12, 47), S(-8, 62), S(-9, 85), S(-7, 97), 
                S(5, 83), S(4, 69), S(10, 48), S(-14, 22), S(-16, 51), S(-18, 60), S(-9, 79), 
                S(-10, 77), S(-11, 69), S(0, 49), S(2, 36), S(-17, 11), S(-10, 27), S(-15, 50), 
                S(-16, 48), S(-13, 51), S(-6, 43), S(5, 22), S(0, 10), S(-19, 6), S(-14, 10), 
                S(-3, 7), S(-4, 17), S(-6, 20), S(2, -5), S(8, -32), S(19, -62), S(-20, 0), 
                S(-31, 8), S(-24, 11), S(-9, 2), S(-17, 6), S(-30, 6), S(-8, -23), S(-15, -23)
            }, 
            {
                S(42, -89), S(18, -40), S(51, -31), S(-87, 18), S(-32, -1), S(16, 0), S(65, -6), S(153, -108), 
                S(-73, 1), S(-34, 30), S(-77, 43), S(28, 24), S(-23, 45), S(-17, 56), S(20, 46), 
                S(0, 15), S(-94, 16), S(6, 34), S(-59, 53), S(-78, 64), S(-38, 63), S(35, 56), 
                S(16, 54), S(-19, 26), S(-62, 6), S(-72, 40), S(-87, 58), S(-132, 70), S(-118, 69), 
                S(-82, 64), S(-81, 55), S(-105, 30), S(-56, -4), S(-65, 25), S(-95, 49), S(-121, 63), 
                S(-118, 62), S(-83, 49), S(-87, 38), S(-110, 22), S(-13, -14), S(1, 7), S(-53, 28), 
                S(-65, 40), S(-59, 40), S(-57, 31), S(-12, 12), S(-29, 0), S(73, -36), S(33, -9), 
                S(19, 2), S(-13, 13), S(-15, 16), S(2, 7), S(49, -10), S(58, -28), S(69, -70), 
                S(91, -51), S(65, -32), S(-31, -14), S(31, -39), S(-7, -16), S(72, -42), S(74, -70)
            }
        };
        
        const int knight_mobility[9] = {S(-13, -26), S(16, 17), S(31, 14), S(35, 11), S(44, 7), S(49, 4), S(53, 1), S(55, 0), S(69, -12)};
        const int bishop_mobility[14] = {S(-30, -30), S(-9, -33), S(6, -42), S(23, -22), S(30, -16), S(37, -7), S(46, 1), S(52, 9), S(62, 13), S(61, 19), S(69, 25), S(80, 17), S(77, 24), S(101, 14)};
        const int rook_mobility[15] = {S(-30, -35), S(-25, -20), S(-6, 0), S(6, 2), S(9, 14), S(17, 13), S(18, 23), S(24, 26), S(34, 25), S(37, 30), S(49, 29), S(58, 30), S(63, 34), S(84, 39), S(97, 31)};
        const int queen_mobility[28] = {S(0, 0), S(0, 0), S(0, 0), S(-231, 4), S(-210, 202), S(0, -92), S(7, -172), S(8, -105), S(6, -78), S(13, -62), S(14, -67), S(13, -38), S(17, -21), S(21, -18), S(24, -8), S(31, -12), S(33, -2), S(31, 9), S(35, 18), S(37, 22), S(42, 20), S(40, 32), S(38, 42), S(44, 33), S(51, 31), S(85, 15), S(9, 61), S(304, -89)};

        Phase get_game_phase(Board &board, int game_phase_score);
        int evaluate(Board& board);
        Score interpolate_eval(EvalScore score, Board &board);
    }
}
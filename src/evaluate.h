#pragma once

#include "board/board.h"

namespace elixir {
    constexpr inline EvalScore S(Score o_score, Score e_score) {
        return static_cast<EvalScore>((o_score << 16) | (e_score & 0xFFFF));
    }

    constexpr inline Score O(EvalScore score) {
        return static_cast<Score>(score >> 16);
    }

    constexpr inline Score E(EvalScore score) {
        return static_cast<Score>(score & 0xFFFF);
    }

    namespace eval {
        constexpr int piece_values[7] = {100, 300, 350, 500, 900, 20000, 0};
        constexpr EvalScore material_score[7] = {S(98, 94), S(403, 248), S(420, 247), S(600, 445), S(1225, 779), S(0, 0), S(0, 0)};
        constexpr EvalScore psqt[6][64] = {
            {
                S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), 
                S(35, 159), S(22, 159), S(13, 143), S(40, 110), S(64, 99), S(52, 113), S(-12, 154), 
                S(-52, 152), S(-42, 95), S(-20, 90), S(1, 77), S(-5, 60), S(15, 44), S(47, 35), 
                S(-8, 67), S(-33, 74), S(-32, 30), S(-11, 19), S(-16, 7), S(-4, -3), S(9, -13), 
                S(-6, -4), S(-4, 6), S(-36, 9), S(-52, 10), S(-17, 2), S(-19, -12), S(0, -16), 
                S(0, -16), S(-9, -17), S(-5, -9), S(-49, -6), S(-46, 3), S(-19, 0), S(-12, -14), 
                S(-18, -3), S(0, -9), S(-21, -8), S(26, -11), S(-17, -12), S(-48, 14), S(-8, 4), 
                S(-25, 5), S(-30, 6), S(-13, -2), S(15, -5), S(42, -12), S(-16, -12), S(0, 0), 
                S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0)
            }, 
            {
                S(-240, -32), S(-58, -70), S(-32, -45), S(-56, -36), S(41, -59), S(-114, -44), S(-140, -43), S(-133, -101), 
                S(-54, -52), S(-14, -40), S(81, -51), S(34, -35), S(92, -57), S(83, -56), S(10, -54), 
                S(8, -74), S(8, -51), S(36, -41), S(39, -13), S(78, -18), S(106, -43), S(131, -39), 
                S(78, -50), S(7, -45), S(27, -41), S(30, -15), S(29, -9), S(66, -3), S(37, -5), 
                S(60, -12), S(18, -17), S(39, -45), S(4, -38), S(15, -25), S(30, -6), S(28, -5), 
                S(38, -3), S(40, -19), S(21, -32), S(-6, -33), S(-3, -47), S(10, -27), S(33, -32), 
                S(27, -10), S(37, -12), S(27, -26), S(36, -39), S(-6, -53), S(-8, -55), S(-14, -45), 
                S(10, -39), S(18, -28), S(18, -30), S(28, -35), S(11, -47), S(5, -55), S(-44, -76), 
                S(-4, -64), S(-34, -40), S(-14, -33), S(-14, -41), S(0, -35), S(-8, -65), S(-63, -55)
            }, 
            {
                S(-8, -16), S(-9, -29), S(10, -26), S(-26, -9), S(-83, -4), S(-10, -13), S(37, -30), S(-44, -7), 
                S(6, -25), S(44, -14), S(21, -10), S(26, -18), S(46, -12), S(89, -28), S(35, -12), 
                S(52, -46), S(18, -8), S(39, -8), S(78, -10), S(53, 0), S(92, -16), S(82, -3), 
                S(75, -14), S(68, -24), S(6, -3), S(31, 2), S(53, -3), S(59, 4), S(60, 2), 
                S(36, -6), S(43, -10), S(24, -18), S(21, -17), S(42, -10), S(42, 2), S(63, -3), 
                S(65, -2), S(46, 2), S(41, -17), S(9, -20), S(54, -29), S(51, -11), S(52, -5), 
                S(44, 0), S(51, 2), S(52, -7), S(45, -22), S(49, -30), S(20, -18), S(62, -31), 
                S(41, -20), S(38, -9), S(39, -6), S(61, -19), S(71, -23), S(41, -35), S(40, -40), 
                S(12, -20), S(31, -38), S(19, -13), S(12, -15), S(14, -23), S(33, -35), S(25, -30)
            }, 
            {
                S(30, -2), S(45, -10), S(57, -10), S(61, -16), S(94, -26), S(123, -37), S(77, -29), S(19, -13), 
                S(-4, -4), S(-16, 8), S(22, -2), S(58, -15), S(22, -13), S(73, -22), S(82, -28), 
                S(52, -28), S(-13, -4), S(-5, -5), S(-3, -6), S(22, -14), S(39, -22), S(52, -24), 
                S(71, -27), S(43, -27), S(-43, -2), S(-22, -8), S(2, -8), S(13, -13), S(-6, -10), 
                S(4, -14), S(27, -24), S(23, -27), S(-46, -7), S(-45, -4), S(-41, -1), S(-24, -3), 
                S(-18, -8), S(-23, -12), S(-5, -23), S(-19, -27), S(-49, -15), S(-36, -12), S(-22, -13), 
                S(-12, -16), S(-15, -14), S(-23, -19), S(7, -34), S(-8, -33), S(-57, -10), S(-33, -13), 
                S(-35, -5), S(-27, -8), S(-23, -13), S(-20, -14), S(-2, -22), S(-63, -13), S(-31, -14), 
                S(-28, -6), S(-12, -7), S(-10, 0), S(-5, -14), S(-19, -17), S(-38, -11), S(-21, -45)
            }, 
            {
                S(-49, 34), S(-11, 32), S(30, 22), S(68, 18), S(89, 1), S(88, 6), S(-24, 28), S(-45, 66), 
                S(-19, 21), S(-27, 28), S(-27, 52), S(-53, 98), S(-36, 82), S(100, 47), S(17, 59), 
                S(131, -67), S(-16, 0), S(-10, 21), S(8, 47), S(29, 32), S(38, 74), S(84, 19), 
                S(116, -12), S(64, -9), S(-24, 10), S(-10, 36), S(-3, 33), S(-5, 61), S(-2, 80), 
                S(6, 76), S(-7, 60), S(18, 26), S(-11, 10), S(-3, 27), S(-5, 32), S(-2, 60), 
                S(7, 47), S(4, 36), S(10, 34), S(-4, 16), S(-9, -14), S(11, -19), S(0, 38), 
                S(6, 17), S(3, 35), S(10, 27), S(13, 30), S(0, 2), S(-13, 9), S(9, 9), 
                S(12, -1), S(10, 16), S(15, 6), S(31, -32), S(34, -41), S(15, -25), S(5, -7), 
                S(-9, -11), S(0, -10), S(17, -48), S(-3, 4), S(-16, -13), S(-45, 1), S(-3, -35)
            }, 
            {
                S(122, -55), S(78, -18), S(101, -20), S(89, -14), S(106, -12), S(92, -1), S(58, -1), S(61, -27), 
                S(52, -13), S(125, 0), S(80, 2), S(57, 4), S(61, 8), S(121, 17), S(15, 31), 
                S(-26, 22), S(51, -8), S(142, 2), S(37, 17), S(65, 12), S(10, 24), S(71, 27), 
                S(84, 31), S(-16, 25), S(10, -14), S(11, 9), S(42, 16), S(-5, 28), S(-19, 29), 
                S(-9, 35), S(7, 28), S(-44, 20), S(39, -25), S(25, 2), S(4, 21), S(-67, 38), 
                S(-57, 41), S(-75, 43), S(-39, 27), S(-85, 17), S(7, -19), S(14, 4), S(-73, 31), 
                S(-87, 42), S(-89, 45), S(-65, 39), S(-18, 21), S(-41, 10), S(30, -20), S(-20, 7), 
                S(-40, 23), S(-92, 38), S(-77, 37), S(-45, 31), S(11, 10), S(11, -7), S(-59, -15), 
                S(15, -16), S(-11, -2), S(-81, 9), S(-15, -14), S(-50, 5), S(26, -22), S(20, -44)
            }
        };
        Phase get_game_phase(Board &board, int game_phase_score);
        int evaluate(Board& board);
        Score interpolate_eval(EvalScore score, Board &board);
    }
}
#pragma once

#include "../evaluate.h"
#include "../types.h"
namespace elixir::eval {
    const std::array<EvalScore, 6> material_score = {S(102, 59),  S(273, 376),  S(293, 371),
                                                     S(411, 661), S(938, 1200), S(0, 0)};

    const std::array<std::array<EvalScore, 64>, 6> psqt = {
        {{S(0, 0),     S(0, 0),     S(0, 0),     S(0, 0),     S(0, 0),    S(0, 0),    S(0, 0),
          S(0, 0),     S(56, 277),  S(74, 273),  S(54, 270),  S(93, 217), S(67, 214), S(48, 220),
          S(-38, 280), S(-33, 276), S(-24, 174), S(-16, 196), S(21, 155), S(27, 132), S(31, 124),
          S(57, 104),  S(21, 166),  S(4, 140),   S(-40, 88),  S(-23, 90), S(-16, 68), S(-10, 55),
          S(8, 51),    S(6, 49),    S(-5, 77),   S(-3, 57),   S(-51, 62), S(-34, 72), S(-26, 50),
          S(-10, 45),  S(-9, 47),   S(-7, 43),   S(-21, 63),  S(-18, 38), S(-50, 58), S(-39, 69),
          S(-31, 52),  S(-26, 57),  S(-13, 57),  S(-14, 49),  S(-6, 59),  S(-12, 36), S(-52, 64),
          S(-39, 72),  S(-39, 63),  S(-38, 70),  S(-27, 74),  S(-4, 53),  S(1, 58),   S(-23, 39),
          S(0, 0),     S(0, 0),     S(0, 0),     S(0, 0),     S(0, 0),    S(0, 0),    S(0, 0),
          S(0, 0)},
         {S(-174, -86), S(-145, -20),  S(-80, -6),  S(-50, -16), S(-7, -14),  S(-80, -34),
          S(-126, -17), S(-121, -108), S(-39, -26), S(-21, -7),  S(8, -6),    S(30, -7),
          S(7, -14),    S(69, -29),    S(-26, -9),  S(-2, -42),  S(-19, -13), S(14, -5),
          S(22, 10),    S(42, 14),     S(69, -5),   S(79, -13),  S(31, -18),  S(7, -27),
          S(-31, 0),    S(-14, 8),     S(6, 13),    S(21, 21),   S(14, 18),   S(38, 14),
          S(1, 2),      S(1, -25),     S(-43, -12), S(-19, -2),  S(0, 25),    S(0, 24),
          S(11, 28),    S(7, 15),      S(5, 0),     S(-26, -18), S(-52, -13), S(-26, 1),
          S(-11, 6),    S(-1, 26),     S(12, 23),   S(-2, 1),    S(-3, -5),   S(-31, -14),
          S(-57, -19),  S(-45, -9),    S(-30, -1),  S(-13, 2),   S(-13, 2),   S(-12, -3),
          S(-26, -17),  S(-28, -9),    S(-97, -28), S(-44, -32), S(-51, -9),  S(-34, -11),
          S(-30, -7),   S(-22, -18),   S(-39, -25), S(-64, -34)},
         {S(-31, 17), S(-53, 23), S(-51, 17), S(-97, 29), S(-80, 25), S(-65, 14), S(-29, 12),
          S(-59, 11), S(-17, 1),  S(-1, 11),  S(-9, 12),  S(-25, 16), S(4, 3),    S(-4, 8),
          S(-9, 16),  S(-11, 0),  S(-5, 21),  S(13, 15),  S(10, 20),  S(28, 8),   S(16, 14),
          S(50, 17),  S(33, 13),  S(22, 17),  S(-14, 16), S(-2, 23),  S(12, 20),  S(26, 34),
          S(22, 25),  S(16, 24),  S(-1, 19),  S(-10, 15), S(-13, 12), S(-10, 23), S(-5, 30),
          S(19, 28),  S(15, 27),  S(-4, 24),  S(-7, 18),  S(0, 2),    S(-7, 14),  S(3, 21),
          S(4, 23),   S(2, 25),   S(5, 29),   S(6, 22),   S(7, 15),   S(10, 4),   S(0, 15),
          S(6, 6),    S(12, 1),   S(-6, 17),  S(5, 13),   S(14, 8),   S(24, 13),  S(5, -2),
          S(-9, 2),   S(13, 15),  S(-5, 8),   S(-13, 14), S(-5, 13),  S(-9, 21),  S(11, 0),
          S(4, -11)},
         {S(-5, 19),  S(-14, 32), S(-8, 31),  S(-9, 26),  S(0, 17),   S(17, 22),   S(1, 26),
          S(-24, 27), S(-20, 21), S(-22, 38), S(0, 32),   S(16, 21),  S(-4, 20),   S(16, 22),
          S(-7, 25),  S(-16, 18), S(-36, 19), S(-10, 25), S(-12, 18), S(-14, 15),  S(13, 0),
          S(20, 5),   S(49, 3),   S(-4, 0),   S(-40, 18), S(-28, 20), S(-28, 22),  S(-21, 16),
          S(-21, 0),  S(-10, 5),  S(-15, 8),  S(-27, 0),  S(-47, 10), S(-51, 21),  S(-37, 13),
          S(-34, 12), S(-32, 5),  S(-40, 15), S(-25, 6),  S(-42, -2), S(-47, 4),   S(-47, 11),
          S(-36, 2),  S(-35, 6),  S(-26, -3), S(-25, 0),  S(-2, -17), S(-22, -22), S(-47, -2),
          S(-42, 8),  S(-27, 3),  S(-28, 5),  S(-22, -5), S(-17, -2), S(-19, -9),  S(-49, -13),
          S(-28, 5),  S(-27, 7),  S(-19, 8),  S(-14, 2),  S(-10, -5), S(-11, 3),   S(-19, -1),
          S(-30, -10)},
         {S(-26, 48), S(-37, 70), S(-14, 86), S(20, 69),  S(22, 67),   S(31, 67),   S(67, 14),
          S(4, 56),   S(0, 31),   S(-26, 63), S(-22, 94), S(-33, 116), S(-28, 133), S(8, 91),
          S(-2, 79),  S(43, 69),  S(2, 32),   S(-3, 45),  S(-8, 77),   S(1, 85),    S(10, 99),
          S(55, 80),  S(64, 48),  S(64, 46),  S(-12, 40), S(-9, 51),   S(-8, 63),   S(-9, 82),
          S(-8, 97),  S(4, 89),   S(12, 82),  S(17, 71),  S(-7, 36),   S(-12, 58),  S(-10, 57),
          S(-3, 76),  S(-2, 71),  S(-1, 69),  S(6, 62),   S(11, 63),   S(-6, 26),   S(0, 38),
          S(0, 49),   S(-1, 43),  S(2, 51),   S(6, 54),   S(17, 43),   S(12, 33),   S(-2, 19),
          S(1, 20),   S(9, 18),   S(14, 24),  S(11, 30),  S(21, 6),    S(27, -18),  S(32, -36),
          S(-5, 20),  S(-3, 18),  S(4, 18),   S(9, 31),   S(9, 16),    S(-2, 18),   S(18, -5),
          S(6, -9)},
         {S(68, -106),  S(47, -48),  S(72, -33), S(-32, 7),   S(4, -5),    S(42, -2),   S(68, -9),
          S(139, -111), S(-61, -3),  S(0, 27),   S(-37, 38),  S(44, 26),   S(3, 45),    S(18, 56),
          S(18, 50),    S(-11, 16),  S(-82, 11), S(36, 33),   S(-43, 54),  S(-57, 65),  S(-29, 68),
          S(50, 59),    S(24, 57),   S(-26, 24), S(-56, 0),   S(-68, 38),  S(-88, 60),  S(-137, 74),
          S(-133, 75),  S(-94, 69),  S(-88, 57), S(-118, 28), S(-63, -7),  S(-70, 25),  S(-104, 52),
          S(-139, 68),  S(-140, 68), S(-99, 54), S(-103, 41), S(-136, 25), S(-25, -16), S(-2, 8),
          S(-66, 32),   S(-82, 45),  S(-75, 45), S(-72, 36),  S(-27, 15),  S(-45, 1),   S(71, -38),
          S(25, -8),    S(9, 4),     S(-26, 16), S(-30, 20),  S(-11, 9),   S(35, -9),   S(44, -28),
          S(61, -75),   S(88, -55),  S(61, -35), S(-38, -14), S(22, -36),  S(-9, -17),  S(64, -46),
          S(65, -76)}}};

    const std::array<EvalScore, 9> knight_mobility = {S(20, 0), S(35, -2), S(41, 3),
                                                      S(44, 0), S(47, 3),  S(46, 7),
                                                      S(45, 8), S(44, 9),  S(45, 5)};

    const std::array<EvalScore, 14> bishop_mobility = {S(-2, -58), S(5, -39), S(13, -32),
                                                       S(16, -23), S(23, -9), S(29, 2),
                                                       S(36, 5),   S(39, 12), S(40, 18),
                                                       S(41, 17),  S(45, 14), S(48, 14),
                                                       S(46, 17),  S(74, 1)};

    const std::array<EvalScore, 15> rook_mobility = {S(-9, -28), S(0, -9),  S(3, -5),  S(7, -2),
                                                     S(6, 3),    S(10, 6),  S(13, 8),  S(16, 10),
                                                     S(16, 18),  S(19, 21), S(22, 21), S(24, 24),
                                                     S(23, 28),  S(26, 31), S(23, 29)};

    const std::array<EvalScore, 28> queen_mobility = {
        S(-66, -5), S(-65, -101), S(-73, -56), S(-70, -37), S(-69, -33), S(-66, -26), S(-62, -18),
        S(-64, 1),  S(-62, 8),    S(-60, 12),  S(-59, 23),  S(-59, 29),  S(-58, 38),  S(-58, 44),
        S(-56, 49), S(-56, 55),   S(-53, 59),  S(-56, 70),  S(-53, 76),  S(-51, 76),  S(-41, 75),
        S(-38, 77), S(-37, 79),   S(-31, 80),  S(-11, 61),  S(43, 44),   S(64, 27),   S(157, -3)};

    const EvalScore stacked_pawn_penalty = S(9, 23);

    const EvalScore bishop_pair_bonus = S(20, 68);

    const std::array<EvalScore, 8> passed_pawn_bonus = {S(10, 20), S(-1, 0),  S(-3, 23), S(2, 42),
                                                        S(2, 42),  S(-3, 25), S(-5, -2), S(10, 20)};

    const std::array<EvalScore, 8> rook_open_file_bonus = {S(30, 7),  S(28, 1),   S(23, 11),
                                                           S(24, 11), S(31, 15),  S(45, 0),
                                                           S(71, -7), S(117, -12)};

    const std::array<EvalScore, 8> rook_semi_open_file_bonus = {S(3, 38),  S(10, 10), S(6, 15),
                                                                S(15, 5),  S(12, 6),  S(16, -1),
                                                                S(42, -7), S(37, 14)};

    const std::array<EvalScore, 8> isolated_pawn_penalty = {S(5, 0),   S(9, 17),  S(17, 12),
                                                            S(16, 23), S(19, 23), S(14, 7),
                                                            S(7, 16),  S(18, -3)};

    const std::array<EvalScore, 64> knight_outpost_bonus = {
        S(3, 0),    S(0, 1),   S(0, 1),    S(1, 1),    S(0, 1),    S(3, 0),    S(1, 1),
        S(3, 0),    S(1, 0),   S(2, 0),    S(1, 0),    S(1, 0),    S(1, 0),    S(1, 0),
        S(1, 1),    S(1, 1),   S(-1, 0),   S(3, 3),    S(20, 5),   S(7, 3),    S(21, 5),
        S(15, 5),   S(15, 5),  S(6, 0),    S(17, -3),  S(27, 3),   S(34, 11),  S(42, 3),
        S(49, 5),   S(57, 1),  S(71, 0),   S(41, 10),  S(27, 11),  S(18, 9),   S(33, -1),
        S(30, 2),   S(42, -2), S(46, 2),   S(40, 6),   S(32, 12),  S(2, -3),   S(-4, 1),
        S(5, 5),    S(6, -10), S(8, -11),  S(5, 7),    S(11, -6),  S(9, -3),   S(-4, -7),
        S(-9, 0),   S(-5, 7),  S(-11, -6), S(-13, -7), S(-10, -7), S(-12, -2), S(-10, -12),
        S(-5, -1),  S(0, -9),  S(-30, -4), S(-21, 4),  S(-21, -6), S(-21, -5), S(-12, 1),
        S(-13, -11)};

}
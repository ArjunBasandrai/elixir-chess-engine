#pragma once

#include "../evaluate.h"
#include "../types.h"
namespace elixir::eval {
    const std::array<EvalScore, 6> material_score = {S(78, 38),   S(257, 357),  S(278, 353),
                                                     S(383, 615), S(858, 1113), S(0, 0)};

    const std::array<std::array<EvalScore, 64>, 6> psqt = {
        {{S(0, 0),     S(0, 0),     S(0, 0),    S(0, 0),    S(0, 0),    S(0, 0),    S(0, 0),
          S(0, 0),     S(56, 268),  S(70, 262), S(55, 260), S(93, 206), S(69, 207), S(50, 219),
          S(-38, 273), S(-48, 276), S(-4, 97),  S(0, 110),  S(28, 62),  S(34, 26),  S(43, 22),
          S(68, 39),   S(26, 91),   S(9, 82),   S(-26, 85), S(-13, 87), S(-12, 64), S(-4, 48),
          S(15, 47),   S(10, 49),   S(-5, 80),  S(-6, 63),  S(-36, 71), S(-25, 85), S(-21, 63),
          S(-7, 58),   S(-4, 57),   S(-2, 55),  S(-17, 78), S(-20, 56), S(-42, 66), S(-41, 81),
          S(-31, 64),  S(-27, 67),  S(-20, 66), S(-21, 61), S(-20, 73), S(-21, 52), S(-37, 71),
          S(-31, 85),  S(-30, 71),  S(-33, 69), S(-24, 78), S(-12, 67), S(-8, 76),  S(-32, 57),
          S(0, 0),     S(0, 0),     S(0, 0),    S(0, 0),    S(0, 0),    S(0, 0),    S(0, 0),
          S(0, 0)},
         {S(-167, -81), S(-136, -22),  S(-76, -5),  S(-46, -17), S(-10, -14), S(-75, -34),
          S(-118, -18), S(-118, -101), S(-38, -25), S(-18, -8),  S(7, -7),    S(29, -7),
          S(4, -12),    S(64, -28),    S(-21, -11), S(-1, -41),  S(-8, -14),  S(5, -15),
          S(-23, 2),    S(18, 3),      S(10, -8),   S(33, -24),  S(6, -25),   S(-7, -23),
          S(-31, 11),   S(-12, 6),     S(7, 11),    S(22, 20),   S(17, 14),   S(35, 13),
          S(1, 3),      S(0, -21),     S(-38, -10), S(-17, -4),  S(0, 21),    S(-1, 22),
          S(9, 25),     S(6, 11),      S(7, -1),    S(-22, -19), S(-48, -16), S(-24, -1),
          S(-10, 6),    S(-1, 22),     S(10, 19),   S(-2, 2),    S(-2, -7),   S(-28, -15),
          S(-52, -19),  S(-42, -11),   S(-27, -3),  S(-13, 0),   S(-12, -2),  S(-10, -6),
          S(-18, -21),  S(-21, -13),   S(-84, -27), S(-43, -32), S(-45, -13), S(-31, -13),
          S(-26, -9),   S(-19, -21),   S(-37, -26), S(-55, -24)},
         {S(-33, 12), S(-54, 18), S(-50, 11), S(-92, 22), S(-74, 18), S(-68, 10), S(-28, 8),
          S(-57, 6),  S(-20, -1), S(-1, 6),   S(-9, 8),   S(-25, 11), S(1, 1),    S(-5, 4),
          S(-9, 10),  S(-20, -1), S(-8, 16),  S(9, 11),   S(8, 15),   S(23, 5),   S(15, 9),
          S(43, 15),  S(22, 11),  S(16, 15),  S(-16, 12), S(-4, 18),  S(8, 17),   S(23, 28),
          S(19, 20),  S(11, 20),  S(-3, 15),  S(-12, 12), S(-12, 9),  S(-11, 19), S(-6, 25),
          S(15, 24),  S(12, 23),  S(-5, 20),  S(-7, 14),  S(-2, 0),   S(-11, 9),  S(2, 17),
          S(1, 19),   S(-1, 20),  S(2, 23),   S(4, 17),   S(5, 11),   S(6, 0),    S(-3, 11),
          S(3, 2),    S(8, 0),    S(-8, 11),  S(1, 9),    S(9, 4),    S(24, 5),   S(3, -4),
          S(-11, -1), S(7, 11),   S(-9, 4),   S(-13, 9),  S(-6, 8),   S(-10, 15), S(0, 0),
          S(5, -17)},
         {S(-8, 17),  S(-14, 27), S(-10, 27), S(-9, 23),  S(2, 13),   S(9, 20),    S(-1, 21),
          S(-23, 22), S(-22, 18), S(-20, 33), S(-2, 28),  S(13, 17),  S(0, 15),    S(18, 15),
          S(8, 13),   S(-7, 11),  S(-35, 16), S(-11, 20), S(-13, 15), S(-13, 11),  S(14, -2),
          S(17, 3),   S(47, 0),   S(-2, -2),  S(-38, 17), S(-28, 19), S(-26, 19),  S(-20, 13),
          S(-20, 0),  S(-12, 5),  S(-10, 7),  S(-25, 0),  S(-45, 9),  S(-47, 18),  S(-35, 11),
          S(-32, 9),  S(-27, 2),  S(-38, 13), S(-19, 2),  S(-35, -4), S(-45, 3),   S(-45, 9),
          S(-36, 3),  S(-34, 5),  S(-22, -4), S(-24, 0),  S(1, -18),  S(-18, -22), S(-45, -2),
          S(-39, 5),  S(-26, 2),  S(-27, 2),  S(-19, -7), S(-16, -5), S(-7, -16),  S(-42, -15),
          S(-27, 3),  S(-28, 4),  S(-21, 6),  S(-14, 0),  S(-9, -6),  S(-13, 1),   S(-18, -5),
          S(-22, -14)},
         {S(-28, 47), S(-34, 62), S(-15, 77), S(17, 62),  S(15, 65),   S(26, 60),   S(69, 5),
          S(0, 53),   S(-1, 27),  S(-20, 54), S(-19, 84), S(-31, 105), S(-25, 120), S(12, 80),
          S(12, 63),  S(44, 58),  S(0, 29),   S(-3, 40),  S(-6, 69),   S(1, 78),    S(11, 89),
          S(49, 74),  S(56, 48),  S(52, 49),  S(-13, 38), S(-8, 47),   S(-6, 58),   S(-8, 77),
          S(-7, 90),  S(4, 83),   S(11, 78),  S(14, 67),  S(-8, 33),   S(-12, 55),  S(-7, 51),
          S(-3, 69),  S(-1, 65),  S(0, 64),   S(6, 59),   S(10, 58),   S(-6, 21),   S(-2, 37),
          S(-1, 46),  S(-1, 40),  S(1, 48),   S(4, 52),   S(16, 40),   S(10, 32),   S(-4, 19),
          S(0, 19),   S(7, 17),   S(11, 22),  S(9, 27),   S(17, 6),    S(22, -11),  S(23, -28),
          S(-7, 17),  S(-6, 15),  S(0, 19),   S(5, 29),   S(6, 15),    S(-3, 14),   S(5, -4),
          S(4, -10)},
         {S(69, -86),   S(55, -35),  S(73, -22), S(-34, 14),  S(-5, -5),   S(33, -9),   S(67, -15),
          S(142, -112), S(-61, 4),   S(-1, 31),  S(-40, 43),  S(43, 29),   S(-3, 40),   S(4, 46),
          S(18, 36),    S(-5, 8),    S(-82, 15), S(39, 32),   S(-31, 53),  S(-57, 65),  S(-23, 60),
          S(49, 47),    S(20, 41),   S(-24, 15), S(-58, 7),   S(-41, 34),  S(-69, 57),  S(-117, 71),
          S(-115, 67),  S(-77, 55),  S(-71, 40), S(-114, 19), S(-64, -3),  S(-40, 21),  S(-80, 48),
          S(-117, 67),  S(-123, 62), S(-75, 39), S(-79, 23),  S(-119, 10), S(-22, -14), S(12, 4),
          S(-53, 32),   S(-76, 49),  S(-72, 45), S(-63, 28),  S(-23, 4),   S(-38, -9),  S(48, -32),
          S(12, -2),    S(0, 10),    S(-30, 24), S(-38, 24),  S(-13, 9),   S(13, -9),   S(30, -30),
          S(44, -67),   S(62, -41),  S(52, -27), S(-21, -4),  S(30, -31),  S(-3, -14),  S(54, -41),
          S(60, -75)}}};

    const std::array<EvalScore, 9> knight_mobility = {S(15, -8), S(27, -11), S(33, -5),
                                                      S(36, -8), S(38, -5),  S(38, 0),
                                                      S(36, 0),  S(36, 0),   S(37, -3)};

    const std::array<EvalScore, 14> bishop_mobility = {S(-6, -56), S(1, -44), S(7, -36), S(9, -28),
                                                       S(15, -15), S(22, -4), S(27, -2), S(30, 4),
                                                       S(31, 9),   S(32, 7),  S(35, 5),  S(39, 4),
                                                       S(37, 7),   S(62, -5)};

    const std::array<EvalScore, 15> rook_mobility = {S(-8, -31), S(-1, -12), S(2, -10), S(5, -5),
                                                     S(3, 0),    S(7, 1),    S(9, 3),   S(11, 5),
                                                     S(11, 12),  S(14, 14),  S(17, 16), S(18, 18),
                                                     S(18, 21),  S(21, 23),  S(18, 21)};

    const std::array<EvalScore, 28> queen_mobility = {
        S(-66, -10), S(-62, -108), S(-69, -52), S(-67, -38), S(-66, -32), S(-63, -26), S(-60, -18),
        S(-62, 0),   S(-61, 7),    S(-59, 10),  S(-59, 20),  S(-59, 25),  S(-58, 32),  S(-58, 38),
        S(-57, 44),  S(-56, 48),   S(-54, 52),  S(-57, 62),  S(-54, 67),  S(-53, 68),  S(-43, 66),
        S(-40, 67),  S(-41, 69),   S(-36, 70),  S(-17, 51),  S(32, 34),   S(54, 21),   S(143, -11)};

    const EvalScore stacked_pawn_penalty = S(0, 28);

    const EvalScore bishop_pair_bonus = S(19, 60);

    const std::array<EvalScore, 8> passed_pawn_bonus = {S(10, 20), S(0, 0),  S(3, 120), S(12, 53),
                                                        S(-4, 25), S(-4, 0), S(-1, -2), S(10, 20)};

    const std::array<EvalScore, 8> rook_open_file_bonus = {S(27, 8),  S(24, 3),  S(20, 11),
                                                           S(22, 11), S(23, 16), S(42, 0),
                                                           S(56, 0),  S(93, -5)};

    const std::array<EvalScore, 8> rook_semi_open_file_bonus = {S(1, 38), S(8, 11), S(5, 14),
                                                                S(10, 8), S(7, 9),  S(16, 0),
                                                                S(27, 0), S(20, 20)};

    const std::array<EvalScore, 8> isolated_pawn_penalty = {S(1, -9),  S(2, 9), S(8, 3), S(7, 9),
                                                            S(10, 10), S(3, 2), S(0, 9), S(1, -7)};

    const std::array<EvalScore, 64> knight_outpost_bonus = {
        S(5, 1),    S(4, -1),  S(0, 0),    S(0, -1),   S(-3, 0),   S(3, 0),   S(4, -1),
        S(1, 2),    S(0, 0),   S(0, -1),   S(0, -1),   S(0, -1),   S(-1, 0),  S(-1, 0),
        S(1, -1),   S(0, 0),   S(-10, 0),  S(12, 10),  S(63, 9),   S(27, 10), S(72, 6),
        S(53, 15),  S(35, 12), S(15, -1),  S(18, -15), S(23, 2),   S(27, 11), S(35, 1),
        S(39, 7),   S(48, 0),  S(62, -2),  S(32, 5),   S(20, 8),   S(18, 9),  S(27, -1),
        S(25, 0),   S(38, -3), S(40, 1),   S(46, -1),  S(25, 11),  S(0, -1),  S(-3, 4),
        S(4, 5),    S(5, -7),  S(7, -9),   S(3, 6),    S(12, -5),  S(8, -3),  S(-3, -7),
        S(-12, 7),  S(-5, 10), S(-9, -3),  S(-11, -5), S(-12, -2), S(-21, 5), S(-6, -9),
        S(-9, 1),   S(1, -2),  S(-42, 10), S(-24, 10), S(-19, -3), S(-25, 6), S(-19, 9),
        S(-24, -25)};

    const std::array<EvalScore, 8> supported_pawn_bonus = {S(0, 0),   S(122, 140), S(19, 52),
                                                           S(13, 15), S(14, 5),    S(20, 10),
                                                           S(52, 73), S(0, 0)};

    const std::array<EvalScore, 8> pawn_duo_bonus = {S(0, 0),  S(27, 147), S(60, 92), S(21, 30),
                                                     S(11, 9), S(9, 2),    S(4, 0),   S(0, 0)};

    const std::array<EvalScore, 8> king_open_file_penalty = {S(86, 16),  S(126, -1), S(81, 3),
                                                             S(72, 2),   S(61, -2),  S(93, -10),
                                                             S(92, -12), S(56, -4)};

    const std::array<EvalScore, 8> king_semi_open_file_penalty = {S(29, -61), S(61, -31),
                                                                  S(36, -24), S(18, -13),
                                                                  S(11, -4),  S(33, -14),
                                                                  S(45, -25), S(29, -39)};

    const std::array<EvalScore, 14> pawn_shelter_table = {S(0, 0),    S(0, 0),   S(0, 0),
                                                          S(21, -4),  S(12, -3), S(21, -5),
                                                          S(29, 0),   S(0, 0),   S(26, 0),
                                                          S(-24, 14), S(-23, 9), S(-22, 14),
                                                          S(-17, 17), S(-39, 19)};

}
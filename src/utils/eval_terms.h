#pragma once

#include "../evaluate.h"
#include "../types.h"
namespace elixir::eval {
    const std::array<EvalScore, 6> material_score = {S(72, 34),   S(246, 343),  S(266, 341),
                                                     S(362, 583), S(810, 1051), S(0, 0)};

    const std::array<std::array<EvalScore, 64>, 6> psqt = {
        {{S(0, 0),    S(0, 0),     S(0, 0),    S(0, 0),    S(0, 0),    S(0, 0),    S(0, 0),
          S(0, 0),    S(46, 252),  S(58, 249), S(34, 257), S(70, 220), S(63, 222), S(51, 232),
          S(2, 270),  S(-23, 267), S(-7, 85),  S(-5, 99),  S(18, 61),  S(20, 37),  S(36, 34),
          S(49, 47),  S(20, 87),   S(-10, 81), S(-26, 79), S(-14, 84), S(-10, 62), S(-6, 50),
          S(16, 47),  S(0, 53),    S(0, 76),   S(-17, 63), S(-35, 70), S(-23, 84), S(-18, 62),
          S(-7, 57),  S(-1, 55),   S(-7, 57),  S(-9, 74),  S(-27, 57), S(-40, 66), S(-38, 81),
          S(-27, 63), S(-24, 64),  S(-16, 63), S(-20, 60), S(-15, 70), S(-30, 53), S(-35, 71),
          S(-29, 84), S(-26, 69),  S(-31, 65), S(-19, 72), S(-11, 62), S(-3, 71),  S(-28, 55),
          S(0, 0),    S(0, 0),     S(0, 0),    S(0, 0),    S(0, 0),    S(0, 0),    S(0, 0),
          S(0, 0)},
         {S(-162, -78), S(-131, -22), S(-74, -6),  S(-43, -17), S(-10, -15), S(-73, -33),
          S(-115, -19), S(-116, -97), S(-38, -25), S(-17, -8),  S(7, -8),    S(28, -8),
          S(3, -13),    S(60, -28),   S(-19, -12), S(-1, -41),  S(-3, -16),  S(0, -20),
          S(-32, 3),    S(8, -1),     S(-4, -4),   S(17, -24),  S(4, -27),   S(-9, -22),
          S(-31, 9),    S(-12, 3),    S(5, 8),     S(19, 17),   S(14, 13),   S(32, 10),
          S(0, 1),      S(-1, -21),   S(-37, -11), S(-16, -6),  S(-1, 18),   S(-2, 19),
          S(7, 22),     S(4, 9),      S(5, -3),    S(-23, -18), S(-46, -17), S(-24, -2),
          S(-11, 4),    S(-2, 19),    S(8, 16),    S(-4, 0),    S(-4, -7),   S(-30, -15),
          S(-51, -19),  S(-40, -12),  S(-26, -5),  S(-14, -1),  S(-14, -2),  S(-11, -6),
          S(-18, -21),  S(-23, -12),  S(-80, -28), S(-41, -31), S(-43, -14), S(-32, -12),
          S(-25, -10),  S(-20, -20),  S(-38, -25), S(-53, -24)},
         {S(-35, 12), S(-52, 14), S(-50, 9),  S(-86, 18), S(-72, 16), S(-65, 5),  S(-27, 5),
          S(-56, 2),  S(-19, -4), S(-2, 5),   S(-10, 4),  S(-25, 10), S(0, 0),    S(-1, 1),
          S(-7, 6),   S(-22, -2), S(-10, 12), S(7, 9),    S(5, 13),   S(19, 4),   S(14, 7),
          S(39, 11),  S(19, 9),   S(12, 11),  S(-17, 8),  S(-5, 16),  S(6, 14),   S(20, 26),
          S(15, 18),  S(8, 17),   S(-4, 12),  S(-12, 8),  S(-14, 7),  S(-12, 15), S(-8, 23),
          S(12, 22),  S(9, 21),   S(-7, 17),  S(-8, 12),  S(-3, -3),  S(-12, 7),  S(0, 15),
          S(0, 16),   S(-3, 18),  S(0, 21),   S(1, 14),   S(2, 9),    S(4, -1),   S(-5, 9),
          S(1, 0),    S(6, -2),   S(-10, 9),  S(0, 7),    S(7, 3),    S(20, 3),   S(2, -6),
          S(-12, -4), S(5, 7),    S(-10, 1),  S(-14, 6),  S(-6, 4),   S(-11, 11), S(-1, -1),
          S(5, -20)},
         {S(-7, 14),  S(-13, 23), S(-10, 24), S(-12, 22), S(1, 11),   S(8, 17),    S(-1, 19),
          S(-2, 15),  S(-20, 16), S(-19, 29), S(-1, 25),  S(9, 18),   S(0, 14),    S(20, 12),
          S(9, 9),    S(7, 3),    S(-33, 14), S(-11, 17), S(-13, 13), S(-15, 11),  S(11, -2),
          S(16, 0),   S(41, -3),  S(3, -7),   S(-37, 14), S(-27, 16), S(-25, 16),  S(-22, 12),
          S(-19, 0),  S(-10, 1),  S(-12, 4),  S(-19, -3), S(-43, 7),  S(-45, 15),  S(-34, 9),
          S(-32, 10), S(-26, 2),  S(-35, 9),  S(-18, 0),  S(-29, -7), S(-43, 1),   S(-43, 7),
          S(-35, 2),  S(-34, 6),  S(-22, -3), S(-23, -1), S(0, -19),  S(-14, -22), S(-43, -2),
          S(-38, 4),  S(-26, 1),  S(-27, 3),  S(-20, -6), S(-15, -5), S(-7, -16),  S(-33, -17),
          S(-27, 2),  S(-27, 3),  S(-21, 5),  S(-16, 1),  S(-10, -5), S(-13, 0),   S(-18, -5),
          S(-19, -14)},
         {S(-29, 47), S(-31, 58), S(-14, 71), S(16, 58),  S(13, 61),  S(25, 55),   S(69, 2),
          S(3, 47),   S(-1, 26),  S(-19, 51), S(-18, 79), S(-29, 98), S(-23, 112), S(17, 72),
          S(17, 54),  S(49, 47),  S(-1, 29),  S(-4, 38),  S(-6, 64),  S(1, 72),    S(12, 81),
          S(46, 68),  S(52, 41),  S(47, 46),  S(-12, 37), S(-8, 44),  S(-6, 55),   S(-8, 73),
          S(-6, 84),  S(4, 75),   S(10, 72),  S(12, 61),  S(-8, 31),  S(-12, 53),  S(-8, 50),
          S(-3, 65),  S(-2, 62),  S(0, 60),   S(5, 54),   S(9, 54),   S(-7, 20),   S(-3, 37),
          S(-2, 44),  S(-2, 38),  S(0, 46),   S(3, 49),   S(14, 38),  S(8, 33),    S(-4, 18),
          S(0, 19),   S(6, 16),   S(9, 22),   S(7, 26),   S(15, 8),   S(18, -5),   S(19, -20),
          S(-7, 16),  S(-6, 15),  S(0, 19),   S(4, 28),   S(5, 15),   S(-4, 14),   S(2, -2),
          S(1, -8)},
         {S(69, -77),   S(69, -26),  S(78, -14), S(-31, 19), S(-8, 0),    S(28, -1),   S(68, -8),
          S(142, -105), S(-56, 2),   S(14, 24),  S(-28, 36), S(47, 24),   S(-3, 28),   S(2, 38),
          S(24, 29),    S(-7, 6),    S(-79, 7),  S(57, 18),  S(-17, 36),  S(-47, 48),  S(-18, 43),
          S(48, 28),    S(15, 28),   S(-33, 4),  S(-57, -6), S(-15, 16),  S(-60, 37),  S(-103, 50),
          S(-113, 47),  S(-74, 38),  S(-70, 25), S(-121, 7), S(-63, -16), S(-26, 9),   S(-76, 34),
          S(-108, 49),  S(-115, 46), S(-73, 30), S(-70, 17), S(-124, 0),  S(-35, -19), S(0, 5),
          S(-47, 26),   S(-54, 35),  S(-56, 34), S(-56, 26), S(-26, 7),   S(-50, -11), S(36, -31),
          S(17, 1),     S(12, 11),   S(-7, 20),  S(-15, 22), S(-1, 12),   S(15, -3),   S(29, -31),
          S(32, -54),   S(51, -24),  S(49, -11), S(-12, 7),  S(32, -16),  S(-1, 1),    S(42, -21),
          S(48, -62)}}};

    const std::array<EvalScore, 9> knight_mobility = {S(12, -15), S(23, -15), S(28, -9),
                                                      S(30, -11), S(32, -8),  S(31, -4),
                                                      S(30, -3),  S(29, -3),  S(31, -6)};

    const std::array<EvalScore, 14> bishop_mobility = {S(-8, -57), S(0, -46), S(3, -37), S(6, -29),
                                                       S(11, -18), S(17, -7), S(22, -5), S(25, 0),
                                                       S(26, 4),   S(28, 2),  S(30, 0),  S(34, 0),
                                                       S(32, 2),   S(55, -10)};

    const std::array<EvalScore, 15> rook_mobility = {S(-10, -31), S(-2, -15), S(1, -12), S(4, -8),
                                                     S(2, -2),    S(6, 0),    S(7, 1),   S(9, 4),
                                                     S(9, 10),    S(11, 12),  S(14, 13), S(16, 16),
                                                     S(16, 18),   S(19, 19),  S(18, 16)};

    const std::array<EvalScore, 28> queen_mobility = {
        S(-65, -13), S(-61, -109), S(-68, -48), S(-66, -38), S(-65, -33), S(-63, -26), S(-60, -19),
        S(-62, -2),  S(-61, 4),    S(-59, 7),   S(-59, 16),  S(-59, 22),  S(-58, 28),  S(-58, 34),
        S(-57, 39),  S(-57, 44),   S(-54, 47),  S(-57, 56),  S(-54, 61),  S(-53, 62),  S(-44, 60),
        S(-41, 60),  S(-41, 63),   S(-37, 63),  S(-17, 43),  S(28, 29),   S(46, 16),   S(133, -18)};

    const EvalScore stacked_pawn_penalty = S(0, 24);

    const EvalScore bishop_pair_bonus = S(18, 56);

    const std::array<EvalScore, 8> passed_pawn_bonus = {S(10, 20),  S(1, 9),   S(4, 133),
                                                        S(10, 62),  S(-9, 24), S(-7, -10),
                                                        S(-1, -21), S(10, 20)};

    const std::array<EvalScore, 8> rook_open_file_bonus = {S(24, 7), S(22, 3),  S(19, 10),
                                                           S(23, 7), S(23, 12), S(39, 0),
                                                           S(49, 1), S(64, 1)};

    const std::array<EvalScore, 8> rook_semi_open_file_bonus = {S(-1, 37), S(7, 12), S(5, 13),
                                                                S(12, 4),  S(7, 7),  S(17, 0),
                                                                S(25, 2),  S(3, 25)};

    const std::array<EvalScore, 8> isolated_pawn_penalty = {S(3, -9),  S(2, 9), S(8, 3), S(5, 11),
                                                            S(10, 10), S(2, 3), S(1, 9), S(0, -7)};

    const std::array<EvalScore, 64> knight_outpost_bonus = {
        S(7, 1),    S(6, -1),  S(0, -1),  S(0, -1),   S(-3, -1),  S(2, 0),   S(4, -2),
        S(0, 3),    S(0, 0),   S(0, -1),  S(0, -2),   S(0, -2),   S(0, -1),  S(-2, 0),
        S(0, -2),   S(0, 0),   S(-14, 0), S(16, 13),  S(69, 5),   S(33, 12), S(81, 0),
        S(62, 13),  S(33, 12), S(17, -5), S(18, -16), S(22, 2),   S(26, 9),  S(33, 0),
        S(37, 4),   S(45, -1), S(57, -4), S(30, 3),   S(19, 8),   S(18, 9),  S(25, -1),
        S(23, 0),   S(36, -4), S(38, -1), S(46, -2),  S(26, 7),   S(0, 0),   S(-1, 2),
        S(5, 4),    S(5, -7),  S(7, -9),  S(5, 3),    S(13, -7),  S(7, -3),  S(0, -6),
        S(-11, 7),  S(-3, 8),  S(-8, -4), S(-9, -5),  S(-9, -3),  S(-17, 4), S(0, -12),
        S(-6, 1),   S(2, -9),  S(-37, 9), S(-22, 9),  S(-19, -4), S(-22, 4), S(-23, 11),
        S(-18, -24)};

    const std::array<EvalScore, 8> supported_pawn_bonus = {S(0, 0),   S(125, 139), S(18, 57),
                                                           S(12, 15), S(12, 5),    S(18, 8),
                                                           S(52, 73), S(0, 0)};

    const std::array<EvalScore, 8> pawn_duo_bonus = {S(0, 0),  S(7, 169), S(56, 80), S(21, 26),
                                                     S(11, 7), S(8, 1),   S(3, 0),   S(0, 0)};

    const std::array<EvalScore, 8> king_open_file_penalty = {S(81, 2),  S(99, -1), S(60, 2),
                                                             S(56, 0),  S(43, -3), S(79, -9),
                                                             S(71, -7), S(65, -14)};

    const std::array<EvalScore, 8> king_semi_open_file_penalty = {S(34, -52), S(51, -25),
                                                                  S(31, -20), S(17, -9),
                                                                  S(14, -6),  S(33, -16),
                                                                  S(43, -28), S(42, -40)};

    const std::array<EvalScore, 24> pawn_shelter_table = {
        S(-42, 40), S(24, 11), S(-11, -1), S(-2, -5), S(5, -6),  S(8, -10), S(8, -10), S(-10, -5),
        S(0, 0),    S(3, 21),  S(-19, -6), S(-2, -2), S(2, -6),  S(3, -10), S(1, -9),  S(-13, 0),
        S(-5, 29),  S(37, -1), S(-20, 0),  S(-8, -2), S(-1, -2), S(4, -10), S(3, -10), S(-2, -4)};

    const std::array<EvalScore, 24> pawn_storm_table = {
        S(9, 0),  S(13, -6), S(10, 0), S(3, 3),   S(-5, 10), S(13, 17),  S(-1, 21), S(-24, 4),
        S(0, 0),  S(10, 0),  S(2, 4),  S(-6, 0),  S(-14, 2), S(-24, 17), S(-21, 9), S(-5, -1),
        S(24, 6), S(11, -3), S(-9, 1), S(-4, -4), S(-5, -8), S(-5, -7),  S(-14, 6), S(-19, 0)};

    const std::array<EvalScore, 8> our_king_pp_proximity = {S(0, 0),    S(-6, 27),  S(-9, 12),
                                                            S(-10, -5), S(-6, -17), S(0, -22),
                                                            S(15, -24), S(11, -25)};

    const std::array<EvalScore, 8> their_king_pp_proximity = {S(0, 0),   S(-55, -23), S(6, -23),
                                                              S(7, 0),   S(11, 10),   S(6, 21),
                                                              S(-1, 27), S(-17, 24)};


}
#pragma once

#include "../evaluate.h"
#include "../types.h"
namespace elixir::eval {
    const std::array<EvalScore, 6> material_score = {S(75, 34),   S(250, 347),  S(270, 344),
                                                     S(370, 591), S(827, 1068), S(0, 0)};

    const std::array<std::array<EvalScore, 64>, 6> psqt = {
        {{S(0, 0),    S(0, 0),     S(0, 0),    S(0, 0),    S(0, 0),    S(0, 0),    S(0, 0),
          S(0, 0),    S(49, 262),  S(66, 255), S(47, 256), S(80, 210), S(63, 212), S(49, 223),
          S(-9, 272), S(-31, 268), S(-7, 94),  S(-4, 108), S(22, 64),  S(23, 32),  S(35, 28),
          S(49, 47),  S(18, 92),   S(-12, 85), S(-26, 83), S(-14, 87), S(-11, 64), S(-7, 50),
          S(15, 47),  S(0, 54),    S(-2, 80),  S(-18, 64), S(-35, 71), S(-23, 84), S(-19, 63),
          S(-8, 58),  S(-2, 56),   S(-8, 57),  S(-11, 77), S(-28, 56), S(-41, 66), S(-38, 81),
          S(-28, 63), S(-25, 64),  S(-17, 63), S(-21, 59), S(-16, 71), S(-31, 52), S(-35, 71),
          S(-29, 84), S(-27, 69),  S(-32, 65), S(-21, 72), S(-11, 61), S(-4, 72),  S(-29, 55),
          S(0, 0),    S(0, 0),     S(0, 0),    S(0, 0),    S(0, 0),    S(0, 0),    S(0, 0),
          S(0, 0)},
         {S(-164, -79), S(-132, -23), S(-74, -6),  S(-43, -17), S(-10, -14), S(-74, -33),
          S(-116, -19), S(-117, -98), S(-38, -25), S(-17, -8),  S(7, -7),    S(29, -8),
          S(4, -13),    S(62, -29),   S(-19, -12), S(-1, -41),  S(-4, -16),  S(1, -18),
          S(-29, 2),    S(11, 0),     S(0, -6),    S(21, -25),  S(4, -26),   S(-8, -22),
          S(-31, 9),    S(-12, 3),    S(6, 9),     S(20, 18),   S(15, 14),   S(33, 11),
          S(0, 1),      S(0, -21),    S(-37, -11), S(-16, -6),  S(0, 19),    S(-1, 20),
          S(8, 23),     S(5, 10),     S(6, -2),    S(-22, -18), S(-46, -16), S(-24, -2),
          S(-10, 4),    S(-1, 20),    S(10, 17),   S(-3, 1),    S(-3, -7),   S(-29, -15),
          S(-51, -19),  S(-40, -12),  S(-26, -4),  S(-13, -1),  S(-13, -2),  S(-10, -6),
          S(-17, -21),  S(-22, -12),  S(-81, -27), S(-41, -32), S(-43, -13), S(-31, -13),
          S(-25, -10),  S(-19, -21),  S(-38, -25), S(-53, -24)},
         {S(-34, 10), S(-52, 15), S(-50, 8), S(-88, 19), S(-72, 15), S(-66, 7),  S(-27, 4),
          S(-56, 3),  S(-19, -3), S(-2, 5),  S(-9, 5),   S(-25, 9),  S(1, 0),    S(0, 1),
          S(-7, 7),   S(-21, -2), S(-9, 13), S(8, 10),   S(6, 14),   S(21, 4),   S(16, 7),
          S(40, 12),  S(20, 8),   S(13, 12), S(-16, 9),  S(-5, 16),  S(7, 15),   S(21, 27),
          S(16, 19),  S(9, 19),   S(-4, 13), S(-11, 9),  S(-13, 7),  S(-12, 17), S(-7, 23),
          S(13, 23),  S(10, 22),  S(-7, 19), S(-8, 12),  S(-2, -1),  S(-12, 7),  S(1, 15),
          S(0, 17),   S(-2, 19),  S(0, 22),  S(2, 15),   S(3, 9),    S(5, -2),   S(-4, 9),
          S(2, 0),    S(7, -1),   S(-9, 10), S(0, 7),    S(8, 3),    S(21, 3),   S(3, -6),
          S(-11, -3), S(6, 8),    S(-9, 2),  S(-13, 7),  S(-6, 5),   S(-11, 12), S(0, -1),
          S(6, -21)},
         {S(-7, 15),  S(-13, 25), S(-9, 25),  S(-11, 22), S(1, 12),   S(9, 18),    S(0, 18),
          S(-7, 16),  S(-20, 16), S(-20, 30), S(-1, 26),  S(10, 18),  S(0, 14),    S(21, 13),
          S(10, 10),  S(7, 5),    S(-33, 14), S(-11, 18), S(-13, 14), S(-15, 11),  S(12, -2),
          S(17, 0),   S(43, -2),  S(3, -6),   S(-37, 15), S(-27, 16), S(-25, 17),  S(-21, 12),
          S(-20, 0),  S(-11, 3),  S(-12, 5),  S(-20, -2), S(-44, 7),  S(-45, 16),  S(-34, 9),
          S(-32, 9),  S(-27, 2),  S(-36, 11), S(-18, 0),  S(-29, -7), S(-43, 2),   S(-43, 7),
          S(-35, 2),  S(-35, 6),  S(-22, -3), S(-24, 0),  S(0, -18),  S(-14, -23), S(-43, -2),
          S(-39, 5),  S(-26, 2),  S(-27, 3),  S(-20, -6), S(-16, -4), S(-7, -16),  S(-34, -16),
          S(-27, 2),  S(-27, 4),  S(-21, 5),  S(-16, 1),  S(-10, -5), S(-13, 0),   S(-18, -4),
          S(-19, -14)},
         {S(-30, 46), S(-32, 59), S(-15, 74), S(16, 59),  S(14, 63),   S(25, 58),   S(70, 3),
          S(2, 50),   S(-1, 26),  S(-20, 52), S(-18, 81), S(-29, 100), S(-23, 115), S(16, 74),
          S(17, 56),  S(48, 51),  S(-1, 28),  S(-4, 39),  S(-6, 66),   S(1, 74),    S(13, 84),
          S(47, 69),  S(53, 45),  S(48, 48),  S(-12, 36), S(-8, 45),   S(-6, 55),   S(-8, 74),
          S(-6, 86),  S(4, 77),   S(10, 73),  S(13, 63),  S(-8, 31),   S(-12, 53),  S(-8, 50),
          S(-3, 66),  S(-1, 62),  S(0, 61),   S(6, 56),   S(9, 56),    S(-7, 21),   S(-3, 37),
          S(-2, 45),  S(-2, 39),  S(0, 47),   S(3, 49),   S(14, 39),   S(8, 33),    S(-4, 18),
          S(0, 19),   S(6, 16),   S(9, 22),   S(8, 27),   S(16, 8),    S(19, -7),   S(21, -24),
          S(-7, 16),  S(-6, 14),  S(0, 18),   S(4, 28),   S(5, 15),    S(-4, 15),   S(3, -3),
          S(2, -9)},
         {S(69, -83),   S(63, -34),  S(76, -20), S(-32, 19),  S(-7, -1),   S(30, -5),   S(67, -12),
          S(142, -109), S(-58, 2),   S(8, 23),   S(-33, 39),  S(46, 29),   S(-3, 33),   S(3, 40),
          S(21, 28),    S(-6, 5),    S(-80, 9),  S(51, 19),   S(-20, 43),  S(-48, 57),  S(-18, 50),
          S(49, 32),    S(17, 28),   S(-29, 7),  S(-58, 0),   S(-23, 21),  S(-60, 46),  S(-104, 61),
          S(-109, 56),  S(-73, 44),  S(-72, 28), S(-120, 11), S(-65, -10), S(-30, 14),  S(-78, 43),
          S(-107, 59),  S(-116, 55), S(-78, 36), S(-77, 20),  S(-129, 3),  S(-34, -17), S(-2, 7),
          S(-52, 33),   S(-58, 44),  S(-58, 41), S(-60, 30),  S(-28, 8),   S(-52, -11), S(38, -34),
          S(19, -2),    S(11, 12),   S(-11, 23), S(-18, 24),  S(-1, 12),   S(16, -6),   S(30, -34),
          S(35, -63),   S(55, -34),  S(51, -18), S(-13, 2),   S(33, -21),  S(-1, -4),   S(44, -29),
          S(50, -70)}}};

    const std::array<EvalScore, 9> knight_mobility = {S(14, -12), S(25, -14), S(30, -8),
                                                      S(33, -10), S(35, -7),  S(34, -3),
                                                      S(33, -2),  S(32, -2),  S(33, -6)};

    const std::array<EvalScore, 14> bishop_mobility = {S(-7, -57), S(0, -46), S(5, -37), S(7, -29),
                                                       S(12, -18), S(19, -7), S(24, -5), S(27, 0),
                                                       S(28, 4),   S(30, 3),  S(32, 0),  S(36, 0),
                                                       S(34, 2),   S(58, -10)};

    const std::array<EvalScore, 15> rook_mobility = {S(-9, -31), S(-2, -14), S(2, -11), S(5, -7),
                                                     S(2, -1),   S(7, 0),    S(8, 2),   S(11, 4),
                                                     S(10, 10),  S(13, 12),  S(15, 14), S(17, 16),
                                                     S(17, 18),  S(21, 20),  S(19, 17)};

    const std::array<EvalScore, 28> queen_mobility = {
        S(-65, -12), S(-61, -109), S(-69, -50), S(-66, -38), S(-65, -33), S(-63, -26), S(-60, -19),
        S(-62, -1),  S(-61, 5),    S(-59, 8),   S(-59, 17),  S(-59, 23),  S(-58, 30),  S(-58, 35),
        S(-57, 40),  S(-57, 45),   S(-54, 48),  S(-57, 58),  S(-54, 63),  S(-53, 63),  S(-44, 61),
        S(-41, 61),  S(-41, 64),   S(-37, 65),  S(-17, 46),  S(29, 31),   S(48, 17),   S(137, -15)};

    const EvalScore stacked_pawn_penalty = S(0, 25);

    const EvalScore bishop_pair_bonus = S(18, 58);

    const std::array<EvalScore, 8> passed_pawn_bonus = {S(10, 20), S(9, -2), S(7, 119), S(11, 54),
                                                        S(-5, 25), S(-2, 0), S(0, -3),  S(10, 20)};

    const std::array<EvalScore, 8> rook_open_file_bonus = {S(24, 8), S(22, 3),  S(19, 11),
                                                           S(23, 9), S(23, 14), S(40, 0),
                                                           S(50, 0), S(66, 2)};

    const std::array<EvalScore, 8> rook_semi_open_file_bonus = {S(0, 37), S(7, 11), S(5, 14),
                                                                S(12, 6), S(7, 8),  S(17, 0),
                                                                S(25, 2), S(4, 24)};

    const std::array<EvalScore, 8> isolated_pawn_penalty = {S(1, -9), S(2, 9), S(8, 3), S(6, 10),
                                                            S(11, 9), S(2, 2), S(1, 9), S(0, -9)};

    const std::array<EvalScore, 64> knight_outpost_bonus = {
        S(6, 1),    S(6, -2),  S(0, -1),  S(1, -1),   S(-3, 0),   S(2, 0),   S(4, -2),
        S(0, 3),    S(0, 0),   S(0, -1),  S(0, -1),   S(0, -2),   S(0, -1),  S(-1, -1),
        S(1, -2),   S(0, 0),   S(-12, 0), S(15, 12),  S(68, 7),   S(32, 11), S(80, 1),
        S(60, 14),  S(34, 12), S(17, -3), S(18, -15), S(22, 3),   S(26, 10), S(34, 0),
        S(38, 4),   S(46, -1), S(58, -3), S(30, 4),   S(19, 8),   S(19, 8),  S(26, 0),
        S(24, 0),   S(37, -4), S(39, 0),  S(47, -2),  S(27, 7),   S(0, -1),  S(-1, 3),
        S(5, 4),    S(5, -8),  S(7, -10), S(5, 4),    S(14, -6),  S(8, -4),  S(0, -6),
        S(-11, 7),  S(-4, 8),  S(-8, -4), S(-9, -6),  S(-10, -3), S(-18, 5), S(0, -12),
        S(-7, 1),   S(1, -6),  S(-38, 9), S(-22, 9),  S(-20, -3), S(-22, 5), S(-24, 10),
        S(-20, -25)};

    const std::array<EvalScore, 8> supported_pawn_bonus = {S(0, 0),   S(126, 142), S(19, 55),
                                                           S(12, 15), S(13, 5),    S(18, 9),
                                                           S(52, 73), S(0, 0)};

    const std::array<EvalScore, 8> pawn_duo_bonus = {S(0, 0),  S(15, 167), S(56, 85), S(21, 26),
                                                     S(11, 7), S(8, 1),    S(3, 0),   S(0, 0)};

    const std::array<EvalScore, 8> king_open_file_penalty = {S(85, 11), S(100, 0), S(60, 7),
                                                             S(54, 6),  S(43, 1),  S(79, -7),
                                                             S(73, -7), S(64, -8)};

    const std::array<EvalScore, 8> king_semi_open_file_penalty = {S(35, -62), S(54, -32),
                                                                  S(32, -25), S(17, -12),
                                                                  S(15, -8),  S(33, -19),
                                                                  S(44, -31), S(44, -47)};

    const std::array<EvalScore, 24> pawn_shelter_table = {
        S(-10, 41), S(27, 20), S(-13, 0),  S(-3, -8), S(4, -8),  S(7, -11), S(8, -11), S(-12, -2),
        S(0, 0),    S(51, 20), S(-20, -6), S(-2, -6), S(2, -9),  S(2, -12), S(0, -9),  S(-16, 5),
        S(19, 30),  S(31, 6),  S(-21, 2),  S(-9, -5), S(-1, -4), S(4, -12), S(2, -10), S(-3, -3)};

    const std::array<EvalScore, 24> pawn_storm_table = {
        S(9, 2),  S(13, -3), S(10, 2), S(4, 2),   S(-4, 4),   S(16, 9),   S(2, 12),   S(-24, 6),
        S(0, 0),  S(9, 1),   S(2, 4),  S(-6, -2), S(-13, -5), S(-21, 2),  S(-13, -1), S(-6, 0),
        S(23, 8), S(11, 0),  S(-9, 3), S(-4, -5), S(-4, -14), S(-2, -18), S(-9, -1),  S(-19, 0)};

}
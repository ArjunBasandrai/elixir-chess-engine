#pragma once

#include "../evaluate.h"
#include "../types.h"
namespace elixir::eval {
    const std::array<EvalScore, 6> material_score = {S(76, 37),   S(254, 352),  S(274, 348),
                                                     S(375, 603), S(842, 1090), S(0, 0)};

    const std::array<std::array<EvalScore, 64>, 6> psqt = {
        {{S(0, 0),     S(0, 0),     S(0, 0),    S(0, 0),    S(0, 0),    S(0, 0),    S(0, 0),
          S(0, 0),     S(55, 266),  S(69, 260), S(55, 258), S(92, 206), S(69, 207), S(50, 218),
          S(-36, 271), S(-48, 275), S(-2, 95),  S(0, 108),  S(28, 62),  S(34, 27),  S(43, 22),
          S(67, 39),   S(26, 89),   S(8, 82),   S(-25, 83), S(-12, 86), S(-10, 64), S(-3, 48),
          S(17, 47),   S(11, 49),   S(-3, 78),  S(-6, 63),  S(-35, 71), S(-23, 84), S(-19, 62),
          S(-6, 57),   S(-3, 56),   S(-1, 55),  S(-15, 76), S(-20, 56), S(-40, 66), S(-39, 80),
          S(-29, 63),  S(-27, 67),  S(-19, 66), S(-26, 63), S(-23, 73), S(-27, 53), S(-35, 70),
          S(-30, 85),  S(-28, 70),  S(-33, 69), S(-22, 77), S(-13, 67), S(-9, 75),  S(-33, 57),
          S(0, 0),     S(0, 0),     S(0, 0),    S(0, 0),    S(0, 0),    S(0, 0),    S(0, 0),
          S(0, 0)},
         {S(-165, -80), S(-134, -22),  S(-75, -5),  S(-45, -17), S(-10, -14), S(-75, -33),
          S(-117, -19), S(-118, -100), S(-38, -25), S(-17, -8),  S(7, -7),    S(29, -7),
          S(4, -12),    S(63, -28),    S(-21, -11), S(-1, -41),  S(-6, -15),  S(3, -17),
          S(-27, 2),    S(14, 1),      S(3, -7),    S(27, -25),  S(4, -26),   S(-9, -23),
          S(-31, 10),   S(-12, 5),     S(7, 10),    S(21, 19),   S(16, 13),   S(35, 12),
          S(1, 2),      S(0, -21),     S(-38, -11), S(-17, -5),  S(0, 20),    S(-1, 21),
          S(8, 24),     S(6, 11),      S(7, -2),    S(-22, -19), S(-47, -16), S(-24, -1),
          S(-10, 5),    S(-2, 21),     S(10, 18),   S(-2, 1),    S(-3, -7),   S(-29, -15),
          S(-52, -19),  S(-41, -11),   S(-27, -4),  S(-13, -1),  S(-13, -2),  S(-11, -6),
          S(-18, -21),  S(-21, -13),   S(-83, -27), S(-43, -31), S(-45, -13), S(-31, -13),
          S(-26, -9),   S(-20, -21),   S(-38, -25), S(-56, -24)},
         {S(-33, 11), S(-53, 17), S(-50, 10), S(-90, 21), S(-73, 17), S(-68, 9),  S(-28, 7),
          S(-57, 6),  S(-19, -2), S(-1, 5),   S(-9, 7),   S(-25, 10), S(1, 0),    S(-4, 3),
          S(-8, 9),   S(-20, -1), S(-9, 15),  S(8, 10),   S(7, 14),   S(22, 4),   S(14, 8),
          S(41, 13),  S(21, 10),  S(14, 14),  S(-16, 11), S(-4, 17),  S(8, 15),   S(22, 27),
          S(17, 19),  S(10, 19),  S(-3, 14),  S(-12, 11), S(-13, 8),  S(-12, 17), S(-6, 24),
          S(14, 23),  S(11, 22),  S(-6, 19),  S(-8, 13),  S(-2, 0),   S(-11, 8),  S(1, 16),
          S(0, 18),   S(-1, 19),  S(1, 22),   S(3, 15),   S(4, 10),   S(5, 0),    S(-4, 10),
          S(3, 1),    S(7, -1),   S(-8, 10),  S(1, 8),    S(8, 4),    S(23, 4),   S(3, -5),
          S(-11, -2), S(6, 10),   S(-9, 3),   S(-13, 8),  S(-6, 7),   S(-10, 13), S(0, 0),
          S(5, -18)},
         {S(-7, 16),  S(-14, 26), S(-9, 26),  S(-9, 22),  S(1, 12),   S(9, 19),    S(0, 20),
          S(-19, 21), S(-21, 17), S(-19, 31), S(-2, 27),  S(13, 17),  S(0, 14),    S(19, 14),
          S(8, 12),   S(-4, 9),   S(-34, 15), S(-10, 19), S(-12, 14), S(-13, 10),  S(13, -2),
          S(17, 2),   S(46, -1),  S(-1, -2),  S(-37, 16), S(-26, 18), S(-25, 18),  S(-20, 12),
          S(-19, 0),  S(-11, 4),  S(-10, 6),  S(-24, 0),  S(-44, 8),  S(-46, 17),  S(-35, 11),
          S(-31, 8),  S(-27, 2),  S(-37, 12), S(-19, 2),  S(-34, -5), S(-44, 2),   S(-44, 8),
          S(-36, 3),  S(-34, 5),  S(-22, -4), S(-23, -1), S(1, -18),  S(-17, -23), S(-44, -2),
          S(-38, 5),  S(-26, 2),  S(-26, 1),  S(-19, -7), S(-16, -5), S(-6, -16),  S(-40, -16),
          S(-27, 3),  S(-27, 4),  S(-21, 6),  S(-14, 0),  S(-10, -6), S(-13, 1),   S(-17, -5),
          S(-21, -15)},
         {S(-28, 46), S(-33, 61), S(-15, 76), S(17, 61),  S(14, 64),   S(25, 59),   S(70, 4),
          S(0, 51),   S(-1, 26),  S(-20, 53), S(-19, 83), S(-30, 103), S(-24, 118), S(13, 78),
          S(14, 60),  S(45, 55),  S(0, 29),   S(-3, 39),  S(-5, 67),   S(1, 76),    S(12, 87),
          S(48, 73),  S(54, 47),  S(50, 49),  S(-12, 37), S(-8, 46),   S(-6, 56),   S(-7, 75),
          S(-7, 88),  S(4, 81),   S(11, 76),  S(13, 66),  S(-8, 32),   S(-12, 54),  S(-7, 50),
          S(-3, 68),  S(-1, 64),  S(0, 63),   S(6, 57),   S(9, 57),    S(-6, 20),   S(-2, 37),
          S(-1, 45),  S(-1, 39),  S(1, 47),   S(4, 50),   S(15, 39),   S(10, 32),   S(-4, 19),
          S(0, 19),   S(7, 16),   S(10, 21),  S(8, 27),   S(16, 6),    S(21, -10),  S(22, -27),
          S(-7, 16),  S(-6, 15),  S(0, 19),   S(5, 29),   S(6, 15),    S(-3, 13),   S(3, -2),
          S(3, -10)},
         {S(70, -83),   S(59, -34),  S(74, -21), S(-34, 14),  S(-6, -3),   S(32, -7),   S(67, -13),
          S(142, -111), S(-58, 6),   S(4, 32),   S(-37, 43),  S(44, 29),   S(-3, 40),   S(4, 47),
          S(20, 37),    S(-4, 10),   S(-77, 18), S(47, 33),   S(-26, 54),  S(-53, 64),  S(-21, 60),
          S(52, 48),    S(23, 44),   S(-23, 18), S(-52, 8),   S(-28, 34),  S(-63, 57),  S(-110, 70),
          S(-110, 67),  S(-71, 55),  S(-64, 41), S(-109, 21), S(-57, -3),  S(-31, 20),  S(-77, 48),
          S(-113, 65),  S(-121, 61), S(-75, 40), S(-77, 25),  S(-114, 10), S(-17, -16), S(11, 4),
          S(-54, 31),   S(-76, 47),  S(-72, 43), S(-64, 27),  S(-25, 4),   S(-36, -10), S(49, -33),
          S(8, -2),     S(-4, 10),   S(-33, 23), S(-40, 23),  S(-15, 8),   S(12, -10),  S(35, -32),
          S(43, -66),   S(57, -41),  S(50, -28), S(-21, -4),  S(29, -31),  S(-4, -14),  S(50, -41),
          S(60, -75)}}};

    const std::array<EvalScore, 9> knight_mobility = {S(14, -10), S(26, -12), S(31, -6),
                                                      S(34, -9),  S(36, -6),  S(36, -2),
                                                      S(34, -1),  S(33, -1),  S(35, -5)};

    const std::array<EvalScore, 14> bishop_mobility = {S(-6, -58), S(0, -45), S(6, -37), S(8, -29),
                                                       S(14, -17), S(20, -6), S(25, -4), S(28, 2),
                                                       S(29, 7),   S(31, 5),  S(33, 3),  S(37, 2),
                                                       S(36, 5),   S(60, -7)};

    const std::array<EvalScore, 15> rook_mobility = {S(-8, -31), S(-1, -13), S(2, -11), S(5, -7),
                                                     S(2, -1),   S(7, 0),    S(8, 2),   S(11, 4),
                                                     S(11, 11),  S(13, 13),  S(16, 14), S(17, 17),
                                                     S(17, 20),  S(20, 22),  S(18, 19)};

    const std::array<EvalScore, 28> queen_mobility = {
        S(-66, -11), S(-62, -109), S(-69, -52), S(-66, -39), S(-65, -33), S(-63, -26), S(-60, -18),
        S(-62, 0),   S(-61, 6),    S(-59, 9),   S(-59, 18),  S(-59, 24),  S(-58, 31),  S(-58, 37),
        S(-57, 42),  S(-56, 47),   S(-55, 50),  S(-57, 60),  S(-54, 65),  S(-53, 66),  S(-44, 64),
        S(-41, 64),  S(-41, 67),   S(-36, 68),  S(-17, 49),  S(31, 33),   S(51, 19),   S(140, -13)};

    const EvalScore stacked_pawn_penalty = S(1, 28);

    const EvalScore bishop_pair_bonus = S(18, 59);

    const std::array<EvalScore, 8> passed_pawn_bonus = {S(10, 20), S(0, -4), S(3, 117), S(12, 52),
                                                        S(-4, 24), S(-3, 0), S(-1, -2), S(10, 20)};

    const std::array<EvalScore, 8> rook_open_file_bonus = {S(26, 8),  S(24, 3),  S(20, 11),
                                                           S(22, 10), S(24, 15), S(41, 0),
                                                           S(55, 0),  S(88, -4)};

    const std::array<EvalScore, 8> rook_semi_open_file_bonus = {S(1, 37), S(8, 11), S(6, 14),
                                                                S(9, 8),  S(7, 9),  S(16, 0),
                                                                S(27, 0), S(17, 20)};

    const std::array<EvalScore, 8> isolated_pawn_penalty = {S(1, -9),  S(2, 9), S(8, 3), S(7, 9),
                                                            S(10, 10), S(2, 3), S(0, 9), S(1, -7)};

    const std::array<EvalScore, 64> knight_outpost_bonus = {
        S(6, 1),    S(5, -1),  S(0, 0),   S(0, -1),   S(-3, 0),   S(2, 0),   S(4, -2),
        S(0, 2),    S(0, 0),   S(0, -1),  S(0, -1),   S(0, -1),   S(0, 0),   S(-1, 0),
        S(0, -1),   S(0, 0),   S(-11, 0), S(13, 11),  S(66, 8),   S(30, 11), S(76, 4),
        S(58, 15),  S(35, 12), S(16, -2), S(18, -15), S(22, 2),   S(27, 10), S(35, 0),
        S(38, 6),   S(46, 0),  S(61, -2), S(30, 5),   S(20, 8),   S(18, 9),  S(27, -1),
        S(25, 0),   S(37, -3), S(39, 1),  S(46, -1),  S(24, 11),  S(0, -1),  S(-2, 3),
        S(4, 5),    S(5, -7),  S(7, -9),  S(3, 6),    S(12, -5),  S(8, -3),  S(-3, -6),
        S(-11, 8),  S(-5, 9),  S(-9, -3), S(-11, -4), S(-11, -2), S(-20, 6), S(-6, -9),
        S(-9, 1),   S(1, -3),  S(-41, 9), S(-24, 10), S(-19, -3), S(-25, 6), S(-20, 10),
        S(-23, -25)};

    const std::array<EvalScore, 8> supported_pawn_bonus = {S(0, 0),   S(124, 135), S(19, 51),
                                                           S(12, 15), S(13, 5),    S(18, 9),
                                                           S(52, 73), S(0, 0)};

    const std::array<EvalScore, 8> pawn_duo_bonus = {S(0, 0),  S(22, 160), S(58, 90), S(21, 29),
                                                     S(11, 8), S(8, 2),    S(3, 0),   S(0, 0)};

    const std::array<EvalScore, 8> king_open_file_penalty = {S(84, 14),  S(116, -2), S(71, 3),
                                                             S(63, 0),   S(52, -3),  S(84, -11),
                                                             S(83, -12), S(51, -5)};

    const std::array<EvalScore, 8> king_semi_open_file_penalty = {S(23, -61), S(53, -32),
                                                                  S(28, -25), S(10, -14),
                                                                  S(5, -6),   S(26, -15),
                                                                  S(39, -26), S(25, -41)};

    const std::array<EvalScore, 12> pawn_shelter_table = {S(13, -3),  S(12, 3),  S(10, 0),
                                                          S(26, -5),  S(19, -2), S(24, -6),
                                                          S(33, -1),  S(0, 0),   S(30, 0),
                                                          S(-22, 13), S(-14, 9), S(-20, 14)};


}
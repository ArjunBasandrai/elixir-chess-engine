#pragma once

#include "../evaluate.h"
#include "../types.h"
namespace elixir::eval {
    const std::array<EvalScore, 6> material_score = {S(94, 42),   S(265, 370),  S(286, 365),
                                                     S(397, 646), S(905, 1170), S(0, 0)};

    const std::array<std::array<EvalScore, 64>, 6> psqt = {
        {{S(0, 0),     S(0, 0),     S(0, 0),     S(0, 0),     S(0, 0),    S(0, 0),    S(0, 0),
          S(0, 0),     S(53, 274),  S(73, 269),  S(51, 267),  S(90, 210), S(63, 209), S(46, 219),
          S(-36, 275), S(-32, 271), S(-19, 110), S(-16, 126), S(13, 79),  S(13, 44),  S(24, 38),
          S(61, 49),   S(22, 103),  S(14, 86),   S(-36, 91),  S(-20, 94), S(-15, 70), S(-10, 54),
          S(9, 54),    S(7, 55),    S(-3, 82),   S(0, 62),    S(-46, 78), S(-29, 91), S(-23, 68),
          S(-9, 63),   S(-8, 64),   S(-5, 61),   S(-17, 81),  S(-16, 55), S(-50, 70), S(-42, 83),
          S(-33, 67),  S(-29, 70),  S(-19, 70),  S(-18, 64),  S(-13, 73), S(-16, 49), S(-46, 74),
          S(-36, 85),  S(-36, 74),  S(-35, 71),  S(-26, 80),  S(-1, 65),  S(3, 71),   S(-17, 50),
          S(0, 0),     S(0, 0),     S(0, 0),     S(0, 0),     S(0, 0),    S(0, 0),    S(0, 0),
          S(0, 0)},
         {S(-170, -85), S(-142, -21),  S(-77, -6),  S(-47, -16), S(-7, -14),  S(-76, -34),
          S(-123, -18), S(-118, -106), S(-38, -26), S(-20, -7),  S(8, -6),    S(30, -6),
          S(8, -13),    S(69, -28),    S(-24, -10), S(-1, -41),  S(-14, -13), S(11, -9),
          S(-3, 4),     S(32, 10),     S(39, -10),  S(58, -19),  S(17, -22),  S(2, -25),
          S(-33, 8),    S(-12, 7),     S(7, 13),    S(23, 22),   S(16, 17),   S(37, 16),
          S(2, 4),      S(0, -23),     S(-41, -10), S(-19, -2),  S(0, 24),    S(0, 26),
          S(11, 29),    S(7, 14),      S(4, 1),     S(-25, -18), S(-51, -15), S(-26, 0),
          S(-10, 9),    S(0, 26),      S(11, 23),   S(-2, 3),    S(-3, -5),   S(-32, -14),
          S(-57, -17),  S(-44, -10),   S(-29, -2),  S(-13, 1),   S(-13, 0),   S(-12, -4),
          S(-25, -19),  S(-28, -9),    S(-93, -27), S(-42, -32), S(-48, -11), S(-33, -13),
          S(-28, -8),   S(-21, -20),   S(-37, -27), S(-61, -28)},
         {S(-32, 15), S(-53, 22), S(-51, 14), S(-95, 26), S(-77, 21), S(-66, 13), S(-28, 12),
          S(-58, 9),  S(-18, 0),  S(0, 9),    S(-9, 11),  S(-24, 14), S(4, 2),    S(-4, 7),
          S(-8, 13),  S(-13, 0),  S(-6, 19),  S(12, 14),  S(11, 18),  S(26, 7),   S(15, 12),
          S(49, 16),  S(30, 12),  S(22, 17),  S(-14, 15), S(-2, 21),  S(11, 19),  S(25, 32),
          S(21, 23),  S(15, 23),  S(-1, 18),  S(-11, 15), S(-13, 11), S(-10, 21), S(-6, 29),
          S(18, 28),  S(14, 27),  S(-4, 23),  S(-7, 18),  S(-2, 2),   S(-9, 12),  S(3, 20),
          S(3, 22),   S(1, 24),   S(3, 28),   S(5, 20),   S(5, 14),   S(6, 2),    S(-4, 14),
          S(5, 4),    S(11, 0),   S(-7, 15),  S(3, 11),   S(11, 7),   S(22, 10),  S(2, -2),
          S(-10, 0),  S(10, 14),  S(-6, 7),   S(-13, 12), S(-5, 11),  S(-10, 18), S(8, 0),
          S(3, -13)},
         {S(-5, 17),  S(-13, 29), S(-8, 29),  S(-8, 24),  S(1, 16),   S(12, 22),   S(-6, 27),
          S(-28, 27), S(-20, 19), S(-20, 34), S(-1, 30),  S(16, 19),  S(-3, 18),   S(16, 18),
          S(-5, 20),  S(-17, 16), S(-36, 18), S(-9, 21),  S(-11, 16), S(-13, 12),  S(14, -1),
          S(20, 3),   S(49, 1),   S(-3, 0),   S(-39, 18), S(-27, 19), S(-27, 21),  S(-21, 14),
          S(-21, 0),  S(-10, 5),  S(-14, 10), S(-27, 2),  S(-47, 10), S(-48, 19),  S(-37, 13),
          S(-32, 10), S(-30, 4),  S(-40, 14), S(-23, 6),  S(-41, -1), S(-46, 3),   S(-46, 10),
          S(-36, 3),  S(-34, 6),  S(-25, -2), S(-25, 0),  S(-2, -16), S(-21, -21), S(-45, -2),
          S(-41, 7),  S(-26, 3),  S(-28, 4),  S(-21, -6), S(-17, -3), S(-17, -10), S(-47, -12),
          S(-27, 3),  S(-26, 5),  S(-19, 7),  S(-13, 1),  S(-9, -6),  S(-11, 2),   S(-17, -2),
          S(-29, -11)},
         {S(-25, 47), S(-35, 67), S(-14, 82), S(20, 66),  S(20, 67),   S(30, 64),   S(67, 11),
          S(3, 55),   S(0, 29),   S(-23, 58), S(-21, 89), S(-33, 111), S(-27, 126), S(8, 86),
          S(-1, 75),  S(40, 66),  S(2, 31),   S(-3, 43),  S(-7, 73),   S(1, 81),    S(11, 94),
          S(55, 77),  S(60, 49),  S(63, 46),  S(-13, 43), S(-9, 50),   S(-8, 62),   S(-10, 81),
          S(-8, 95),  S(2, 88),   S(11, 82),  S(15, 71),  S(-8, 36),   S(-12, 57),  S(-10, 55),
          S(-4, 74),  S(-3, 69),  S(-1, 68),  S(5, 61),   S(9, 63),    S(-7, 24),   S(-1, 38),
          S(-1, 49),  S(-1, 43),  S(1, 52),   S(4, 53),   S(16, 42),   S(11, 33),   S(-3, 21),
          S(1, 19),   S(9, 16),   S(12, 24),  S(10, 29),  S(19, 5),    S(26, -17),  S(30, -33),
          S(-5, 18),  S(-3, 15),  S(2, 18),   S(8, 30),   S(8, 16),    S(-3, 16),   S(15, -5),
          S(6, -10)},
         {S(67, -103),  S(47, -47),  S(70, -33), S(-34, 8),   S(0, -4),    S(40, -3),   S(69, -9),
          S(141, -112), S(-63, -4),  S(-6, 26),  S(-44, 37),  S(43, 24),   S(-2, 43),   S(11, 53),
          S(18, 46),    S(-8, 14),   S(-85, 10), S(28, 31),   S(-44, 52),  S(-63, 63),  S(-29, 65),
          S(48, 57),    S(20, 55),   S(-24, 24), S(-58, 1),   S(-67, 37),  S(-88, 58),  S(-136, 71),
          S(-130, 73),  S(-91, 67),  S(-85, 56), S(-117, 29), S(-65, -6),  S(-68, 25),  S(-101, 50),
          S(-136, 67),  S(-135, 66), S(-94, 52), S(-98, 39),  S(-131, 23), S(-21, -16), S(-2, 7),
          S(-63, 32),   S(-78, 45),  S(-72, 44), S(-70, 35),  S(-26, 15),  S(-43, 2),   S(73, -37),
          S(26, -7),    S(9, 5),     S(-25, 16), S(-28, 20),  S(-9, 10),   S(36, -8),   S(48, -28),
          S(59, -73),   S(86, -53),  S(60, -33), S(-36, -13), S(22, -34),  S(-8, -15),  S(63, -44),
          S(63, -74)}}};

    const std::array<EvalScore, 9> knight_mobility = {S(18, -1), S(32, -5), S(37, 0),
                                                      S(41, -1), S(43, 1),  S(41, 5),
                                                      S(40, 5),  S(39, 5),  S(39, 1)};

    const std::array<EvalScore, 14> bishop_mobility = {S(-3, -55), S(5, -42),  S(11, -33),
                                                       S(13, -24), S(19, -11), S(26, 0),
                                                       S(32, 3),   S(35, 10),  S(35, 16),
                                                       S(37, 14),  S(39, 11),  S(42, 11),
                                                       S(40, 14),  S(67, 0)};

    const std::array<EvalScore, 15> rook_mobility = {S(-10, -28), S(-1, -11), S(2, -7),  S(6, -4),
                                                     S(5, 1),     S(9, 4),    S(11, 6),  S(14, 8),
                                                     S(14, 16),   S(17, 19),  S(20, 20), S(21, 23),
                                                     S(21, 27),   S(24, 29),  S(20, 28)};

    const std::array<EvalScore, 28> queen_mobility = {
        S(-67, -7), S(-65, -105), S(-72, -55), S(-70, -40), S(-68, -34), S(-65, -28), S(-61, -19),
        S(-63, 0),  S(-62, 7),    S(-60, 11),  S(-59, 22),  S(-59, 28),  S(-58, 36),  S(-58, 42),
        S(-56, 47), S(-56, 53),   S(-53, 57),  S(-56, 68),  S(-53, 74),  S(-51, 74),  S(-43, 73),
        S(-40, 75), S(-39, 77),   S(-33, 77),  S(-14, 59),  S(40, 42),   S(60, 24),   S(153, -5)};

    const EvalScore stacked_pawn_penalty = S(6, 25);

    const EvalScore bishop_pair_bonus = S(19, 65);

    const std::array<EvalScore, 8> passed_pawn_bonus = {S(10, 20), S(-4, 9), S(14, 118), S(12, 57),
                                                        S(-8, 27), S(-7, 2), S(-3, 0),   S(10, 20)};

    const std::array<EvalScore, 8> rook_open_file_bonus = {S(29, 6),  S(26, 1),   S(22, 10),
                                                           S(23, 10), S(30, 13),  S(43, -1),
                                                           S(68, -7), S(113, -13)};

    const std::array<EvalScore, 8> rook_semi_open_file_bonus = {S(2, 39),  S(9, 11), S(6, 14),
                                                                S(12, 6),  S(10, 7), S(16, -1),
                                                                S(39, -6), S(34, 15)};

    const std::array<EvalScore, 8> isolated_pawn_penalty = {S(2, -5),  S(6, 13),  S(14, 8),
                                                            S(13, 16), S(16, 15), S(12, 4),
                                                            S(3, 13),  S(15, -8)};

    const std::array<EvalScore, 64> knight_outpost_bonus = {
        S(5, 0),    S(1, 0),   S(1, 0),    S(2, 0),    S(0, 0),    S(5, 0),   S(2, -1),
        S(4, 0),    S(0, 0),   S(1, 0),    S(1, 0),    S(1, 0),    S(2, 0),   S(1, 0),
        S(1, 0),    S(0, 0),   S(-5, 0),   S(8, 6),    S(46, 10),  S(17, 7),  S(51, 9),
        S(36, 11),  S(29, 10), S(12, 0),   S(19, -11), S(26, 3),   S(31, 11), S(40, 1),
        S(46, 6),   S(56, -2), S(68, -2),  S(38, 8),   S(23, 9),   S(18, 10), S(31, -1),
        S(28, 0),   S(40, -3), S(46, 0),   S(50, -2),  S(29, 11),  S(0, -1),  S(-6, 2),
        S(5, 4),    S(5, -9),  S(8, -10),  S(4, 6),    S(11, -7),  S(8, -4),  S(-3, -8),
        S(-12, 5),  S(-6, 9),  S(-10, -4), S(-12, -5), S(-11, -4), S(-20, 2), S(-8, -12),
        S(-10, 0),  S(0, -4),  S(-45, 6),  S(-26, 10), S(-20, -2), S(-24, 2), S(-13, 7),
        S(-25, -21)};

    const std::array<EvalScore, 8> supported_pawn_bonus = {S(0, 0), S(87, 121), S(20, 41), S(5, 9),
                                                           S(6, 0), S(11, 9),   S(52, 73), S(0, 0)};
}
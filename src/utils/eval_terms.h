#pragma once

#include "../evaluate.h"
#include "../types.h"
namespace elixir::eval {
    const std::array<EvalScore, 6> material_score = {S(105, 61),  S(279, 382),  S(296, 375),
                                                     S(416, 671), S(956, 1216), S(0, 0)};

    const std::array<std::array<EvalScore, 64>, 6> psqt = {
        {{S(0, 0),     S(0, 0),     S(0, 0),     S(0, 0),     S(0, 0),    S(0, 0),    S(0, 0),
          S(0, 0),     S(55, 282),  S(76, 276),  S(55, 274),  S(95, 219), S(69, 216), S(50, 222),
          S(-36, 282), S(-35, 281), S(-26, 177), S(-18, 198), S(21, 157), S(26, 134), S(30, 125),
          S(57, 105),  S(20, 169),  S(4, 142),   S(-42, 89),  S(-25, 91), S(-17, 68), S(-11, 55),
          S(7, 51),    S(5, 49),    S(-7, 78),   S(-4, 57),   S(-53, 62), S(-35, 72), S(-27, 50),
          S(-10, 45),  S(-10, 47),  S(-8, 43),   S(-20, 63),  S(-19, 38), S(-52, 58), S(-39, 69),
          S(-31, 52),  S(-26, 57),  S(-13, 57),  S(-13, 48),  S(-5, 59),  S(-12, 36), S(-53, 64),
          S(-38, 72),  S(-39, 63),  S(-38, 70),  S(-26, 75),  S(-2, 53),  S(3, 58),   S(-23, 39),
          S(0, 0),     S(0, 0),     S(0, 0),     S(0, 0),     S(0, 0),    S(0, 0),    S(0, 0),
          S(0, 0)},
         {S(-178, -87), S(-146, -22),  S(-81, -8),   S(-52, -18), S(-7, -16),  S(-84, -35),
          S(-128, -19), S(-125, -109), S(-41, -27),  S(-24, -8),  S(7, -7),    S(29, -8),
          S(6, -15),    S(68, -30),    S(-28, -11),  S(-4, -44),  S(-24, -15), S(15, -4),
          S(37, 14),    S(46, 16),     S(85, -1),    S(89, -9),   S(39, -15),  S(8, -28),
          S(-22, -2),   S(-7, 13),     S(19, 26),    S(43, 27),   S(22, 28),   S(48, 23),
          S(5, 11),     S(15, -13),    S(-36, -2),   S(-19, 4),   S(2, 27),    S(5, 28),
          S(15, 31),    S(8, 19),      S(3, 4),      S(-23, -10), S(-55, -17), S(-30, -1),
          S(-13, 6),    S(-2, 21),     S(11, 19),    S(-4, 0),    S(-5, -7),   S(-34, -16),
          S(-63, -25),  S(-50, -11),   S(-34, -1),   S(-17, -2),  S(-17, -2),  S(-15, -7),
          S(-30, -21),  S(-32, -17),   S(-103, -31), S(-47, -36), S(-57, -15), S(-41, -13),
          S(-35, -11),  S(-26, -23),   S(-43, -28),  S(-71, -39)},
         {S(-30, 18), S(-54, 24), S(-52, 17), S(-98, 30), S(-83, 26), S(-64, 14), S(-29, 13),
          S(-60, 12), S(-17, 2),  S(-1, 12),  S(-9, 13),  S(-25, 17), S(4, 4),    S(-3, 8),
          S(-8, 16),  S(-10, 1),  S(-6, 22),  S(14, 16),  S(11, 21),  S(28, 9),   S(17, 15),
          S(51, 18),  S(34, 13),  S(22, 18),  S(-13, 17), S(-2, 24),  S(13, 21),  S(27, 35),
          S(22, 26),  S(16, 25),  S(-1, 19),  S(-10, 15), S(-12, 12), S(-10, 24), S(-4, 31),
          S(20, 29),  S(16, 28),  S(-4, 25),  S(-7, 19),  S(0, 2),    S(-7, 15),  S(4, 22),
          S(5, 24),   S(3, 26),   S(5, 30),   S(7, 23),   S(8, 15),   S(10, 5),   S(0, 16),
          S(7, 7),    S(13, 1),   S(-6, 18),  S(5, 14),   S(15, 8),   S(25, 14),  S(6, -1),
          S(-10, 3),  S(13, 16),  S(-5, 9),   S(-14, 15), S(-7, 15),  S(-9, 22),  S(10, 0),
          S(4, -10)},
         {S(-4, 20),  S(-15, 33), S(-9, 33),  S(-10, 28), S(0, 18),   S(20, 22),   S(7, 25),
          S(-13, 23), S(-21, 22), S(-22, 39), S(0, 33),   S(16, 22),  S(-4, 20),   S(17, 23),
          S(-5, 25),  S(-13, 17), S(-37, 20), S(-11, 26), S(-12, 18), S(-15, 16),  S(12, 0),
          S(21, 5),   S(51, 3),   S(-3, 0),   S(-41, 19), S(-29, 21), S(-29, 22),  S(-22, 17),
          S(-23, 0),  S(-12, 6),  S(-16, 8),  S(-28, 0),  S(-48, 11), S(-52, 22),  S(-38, 14),
          S(-35, 13), S(-33, 6),  S(-42, 16), S(-26, 6),  S(-43, -2), S(-49, 5),   S(-48, 11),
          S(-37, 3),  S(-36, 6),  S(-27, -2), S(-26, 0),  S(-2, -17), S(-23, -22), S(-48, -1),
          S(-43, 9),  S(-27, 4),  S(-29, 6),  S(-23, -5), S(-17, -2), S(-19, -8),  S(-50, -13),
          S(-28, 6),  S(-28, 8),  S(-20, 8),  S(-14, 2),  S(-10, -5), S(-11, 4),   S(-19, 0),
          S(-31, -9)},
         {S(-26, 49), S(-38, 72), S(-14, 87), S(20, 71),  S(23, 69),   S(32, 68),   S(66, 15),
          S(4, 57),   S(0, 32),   S(-26, 63), S(-23, 96), S(-34, 118), S(-28, 136), S(9, 92),
          S(-2, 79),  S(44, 68),  S(2, 32),   S(-4, 45),  S(-8, 79),   S(1, 87),    S(11, 100),
          S(56, 81),  S(66, 47),  S(66, 47),  S(-12, 41), S(-9, 51),   S(-8, 64),   S(-9, 83),
          S(-9, 99),  S(4, 90),   S(12, 84),  S(18, 72),  S(-7, 36),   S(-12, 59),  S(-9, 58),
          S(-3, 77),  S(-2, 72),  S(-1, 70),  S(6, 64),   S(11, 64),   S(-6, 27),   S(0, 39),
          S(0, 50),   S(0, 44),   S(3, 52),   S(7, 55),   S(18, 43),   S(12, 35),   S(-2, 20),
          S(2, 21),   S(11, 17),  S(15, 25),  S(12, 31),  S(23, 5),    S(29, -18),  S(33, -37),
          S(-5, 21),  S(-3, 19),  S(4, 19),   S(10, 32),  S(9, 17),    S(-3, 19),   S(18, -6),
          S(7, -9)},
         {S(68, -107), S(47, -48),   S(73, -34),  S(-30, 7),   S(6, -6),    S(43, -3),
          S(68, -9),   S(139, -108), S(-60, -3),  S(4, 26),    S(-33, 38),  S(45, 27),
          S(6, 45),    S(21, 56),    S(18, 51),   S(-12, 16),  S(-80, 10),  S(41, 33),
          S(-41, 54),  S(-53, 65),   S(-28, 68),  S(52, 60),   S(26, 57),   S(-26, 25),
          S(-55, 0),   S(-68, 38),   S(-85, 61),  S(-135, 74), S(-133, 76), S(-94, 69),
          S(-86, 57),  S(-117, 28),  S(-63, -8),  S(-70, 26),  S(-106, 53), S(-142, 70),
          S(-143, 69), S(-101, 55),  S(-105, 41), S(-139, 25), S(-27, -16), S(-3, 8),
          S(-67, 33),  S(-84, 46),   S(-77, 46),  S(-74, 36),  S(-29, 16),  S(-47, 2),
          S(69, -38),  S(24, -8),    S(8, 4),     S(-28, 16),  S(-31, 20),  S(-11, 10),
          S(34, -9),   S(44, -28),   S(61, -77),  S(88, -55),  S(61, -36),  S(-40, -14),
          S(21, -36),  S(-11, -17),  S(63, -47),  S(65, -78)}}};

    const std::array<EvalScore, 9> knight_mobility = {S(23, 0),  S(38, 0),  S(44, 6),
                                                      S(47, 1),  S(50, 5),  S(49, 10),
                                                      S(47, 11), S(46, 12), S(48, 7)};

    const std::array<EvalScore, 14> bishop_mobility = {S(-1, -57), S(6, -39), S(14, -31),
                                                       S(17, -22), S(24, -8), S(31, 4),
                                                       S(37, 6),   S(41, 13), S(42, 20),
                                                       S(43, 18),  S(46, 16), S(49, 16),
                                                       S(47, 19),  S(76, 3)};

    const std::array<EvalScore, 15> rook_mobility = {S(-8, -27), S(0, -8),  S(4, -4),  S(8, -1),
                                                     S(6, 4),    S(11, 7),  S(13, 9),  S(17, 11),
                                                     S(17, 19),  S(20, 22), S(23, 22), S(25, 25),
                                                     S(24, 29),  S(27, 32), S(24, 30)};

    const std::array<EvalScore, 28> queen_mobility = {
        S(-66, -4), S(-64, -98), S(-72, -57), S(-70, -38), S(-68, -34), S(-66, -28), S(-62, -20),
        S(-64, 1),  S(-62, 8),   S(-60, 12),  S(-59, 23),  S(-59, 30),  S(-58, 38),  S(-58, 45),
        S(-56, 50), S(-56, 57),  S(-53, 61),  S(-56, 72),  S(-53, 78),  S(-51, 79),  S(-41, 77),
        S(-38, 80), S(-38, 82),  S(-30, 81),  S(-10, 62),  S(44, 46),   S(66, 29),   S(159, -2)};

    const EvalScore stacked_pawn_penalty = S(9, 24);

    const EvalScore bishop_pair_bonus = S(21, 68);

    const std::array<EvalScore, 8> passed_pawn_bonus = {S(10, 20), S(-1, 0),  S(-2, 23), S(2, 43),
                                                        S(2, 43),  S(-2, 25), S(-5, -2), S(10, 20)};

    const std::array<EvalScore, 8> rook_open_file_bonus = {S(31, 7),  S(28, 1),   S(23, 12),
                                                           S(25, 11), S(32, 15),  S(45, 0),
                                                           S(72, -7), S(118, -12)};

    const std::array<EvalScore, 8> rook_semi_open_file_bonus = {S(3, 39),  S(10, 10), S(6, 15),
                                                                S(15, 4),  S(12, 6),  S(16, -1),
                                                                S(42, -7), S(37, 15)};

    const std::array<EvalScore, 8> isolated_pawn_penalty = {S(5, 0),   S(9, 17),  S(18, 12),
                                                            S(17, 24), S(20, 23), S(15, 7),
                                                            S(9, 16),  S(19, -4)};
}
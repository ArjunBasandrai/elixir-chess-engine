#pragma once

#include "../evaluate.h"
#include "../types.h"
namespace elixir::eval {
    const std::array<EvalScore, 6> material_score = {S(96, 53),   S(269, 372),  S(290, 367),
                                                     S(405, 651), S(922, 1182), S(0, 0)};

    const std::array<std::array<EvalScore, 64>, 6> psqt = {
        {{S(0, 0),     S(0, 0),     S(0, 0),     S(0, 0),     S(0, 0),    S(0, 0),    S(0, 0),
          S(0, 0),     S(55, 273),  S(74, 268),  S(52, 265),  S(91, 212), S(65, 209), S(47, 216),
          S(-37, 275), S(-32, 272), S(-20, 171), S(-15, 193), S(21, 151), S(26, 128), S(32, 120),
          S(56, 102),  S(20, 164),  S(8, 138),   S(-37, 88),  S(-21, 90), S(-15, 68), S(-9, 56),
          S(9, 52),    S(7, 51),    S(-4, 78),   S(0, 58),    S(-48, 62), S(-31, 74), S(-24, 51),
          S(-9, 45),   S(-8, 47),   S(-5, 44),   S(-18, 65),  S(-16, 39), S(-52, 56), S(-45, 66),
          S(-34, 51),  S(-29, 56),  S(-19, 55),  S(-18, 48),  S(-14, 56), S(-16, 35), S(-47, 64),
          S(-38, 72),  S(-37, 63),  S(-36, 68),  S(-26, 73),  S(-2, 53),  S(2, 57),   S(-18, 40),
          S(0, 0),     S(0, 0),     S(0, 0),     S(0, 0),     S(0, 0),    S(0, 0),    S(0, 0),
          S(0, 0)},
         {S(-172, -86), S(-144, -21),  S(-79, -6),  S(-48, -16), S(-7, -14),  S(-78, -34),
          S(-125, -17), S(-119, -107), S(-38, -26), S(-20, -7),  S(8, -6),    S(30, -6),
          S(8, -13),    S(69, -29),    S(-25, -10), S(-2, -42),  S(-16, -13), S(13, -7),
          S(8, 6),      S(37, 12),     S(53, -8),   S(68, -16),  S(23, -21),  S(4, -26),
          S(-32, 5),    S(-12, 8),     S(7, 14),    S(24, 23),   S(17, 19),   S(37, 17),
          S(2, 5),      S(0, -24),     S(-42, -12), S(-19, -3),  S(0, 25),    S(0, 26),
          S(11, 28),    S(8, 15),      S(4, 1),     S(-25, -19), S(-52, -15), S(-26, 0),
          S(-10, 8),    S(-1, 26),     S(11, 24),   S(-1, 2),    S(-3, -5),   S(-32, -14),
          S(-58, -19),  S(-45, -10),   S(-30, -1),  S(-13, 1),   S(-13, 0),   S(-12, -4),
          S(-25, -18),  S(-29, -10),   S(-95, -28), S(-43, -33), S(-49, -11), S(-33, -13),
          S(-29, -8),   S(-21, -20),   S(-38, -27), S(-63, -32)},
         {S(-32, 16), S(-53, 22), S(-51, 15), S(-96, 27), S(-79, 23), S(-66, 13), S(-28, 11),
          S(-59, 10), S(-17, 1),  S(0, 10),   S(-8, 11),  S(-24, 15), S(4, 2),    S(-3, 7),
          S(-7, 15),  S(-12, 0),  S(-5, 20),  S(13, 14),  S(11, 19),  S(28, 8),   S(17, 13),
          S(52, 17),  S(31, 13),  S(23, 17),  S(-14, 15), S(-2, 22),  S(12, 20),  S(26, 33),
          S(22, 24),  S(15, 23),  S(-1, 18),  S(-10, 14), S(-12, 11), S(-10, 22), S(-5, 30),
          S(19, 28),  S(15, 27),  S(-4, 24),  S(-7, 18),  S(-1, 2),   S(-8, 12),  S(3, 20),
          S(3, 23),   S(1, 25),   S(4, 29),   S(6, 21),   S(6, 14),   S(7, 2),    S(-4, 14),
          S(6, 4),    S(11, 1),   S(-7, 16),  S(4, 12),   S(12, 8),   S(23, 11),  S(2, -2),
          S(-10, 0),  S(10, 15),  S(-5, 7),   S(-13, 12), S(-5, 12),  S(-10, 19), S(9, 0),
          S(3, -12)},
         {S(-6, 19),  S(-14, 31), S(-8, 31),  S(-8, 26),  S(1, 17),   S(14, 22),   S(-3, 27),
          S(-28, 27), S(-21, 20), S(-21, 36), S(-1, 32),  S(16, 20),  S(-4, 19),   S(15, 21),
          S(-7, 23),  S(-17, 16), S(-36, 18), S(-10, 24), S(-11, 18), S(-14, 14),  S(14, 0),
          S(20, 5),   S(49, 3),   S(-3, 0),   S(-39, 17), S(-27, 19), S(-28, 22),  S(-21, 15),
          S(-21, 0),  S(-10, 5),  S(-14, 7),  S(-26, 0),  S(-47, 9),  S(-50, 20),  S(-37, 13),
          S(-33, 11), S(-30, 5),  S(-40, 14), S(-23, 5),  S(-41, -3), S(-46, 3),   S(-47, 11),
          S(-36, 3),  S(-34, 6),  S(-25, -2), S(-25, 0),  S(-2, -16), S(-21, -23), S(-45, -3),
          S(-41, 7),  S(-27, 3),  S(-28, 5),  S(-22, -6), S(-17, -3), S(-17, -10), S(-47, -14),
          S(-27, 4),  S(-27, 7),  S(-19, 8),  S(-13, 2),  S(-9, -6),  S(-11, 3),   S(-18, -2),
          S(-29, -11)},
         {S(-25, 48), S(-36, 69), S(-14, 85), S(20, 67),  S(22, 67),   S(31, 66),   S(67, 12),
          S(3, 55),   S(0, 30),   S(-23, 60), S(-22, 92), S(-33, 113), S(-27, 130), S(8, 90),
          S(0, 76),   S(41, 67),  S(2, 31),   S(-3, 44),  S(-7, 76),   S(1, 84),    S(11, 98),
          S(56, 79),  S(62, 49),  S(64, 46),  S(-12, 40), S(-9, 50),   S(-8, 63),   S(-10, 82),
          S(-8, 96),  S(3, 88),   S(12, 81),  S(16, 70),  S(-8, 35),   S(-12, 57),  S(-10, 57),
          S(-3, 75),  S(-3, 70),  S(-1, 68),  S(6, 61),   S(10, 61),   S(-7, 26),   S(-1, 38),
          S(-1, 49),  S(-1, 43),  S(1, 52),   S(5, 53),   S(16, 43),   S(11, 33),   S(-2, 19),
          S(1, 20),   S(9, 16),   S(12, 25),  S(10, 30),  S(20, 5),    S(27, -17),  S(31, -35),
          S(-5, 18),  S(-3, 16),  S(3, 19),   S(8, 30),   S(8, 16),    S(-3, 17),   S(16, -5),
          S(6, -10)},
         {S(68, -104),  S(47, -47),  S(71, -33), S(-33, 8),   S(2, -5),    S(41, -2),   S(68, -9),
          S(140, -112), S(-62, -3),  S(-3, 26),  S(-41, 39),  S(44, 25),   S(0, 45),    S(15, 55),
          S(18, 49),    S(-10, 16),  S(-84, 11), S(32, 33),   S(-44, 53),  S(-60, 64),  S(-29, 67),
          S(49, 58),    S(22, 56),   S(-25, 24), S(-57, 1),   S(-68, 37),  S(-89, 60),  S(-137, 73),
          S(-132, 74),  S(-93, 68),  S(-87, 56), S(-118, 28), S(-64, -7),  S(-69, 25),  S(-102, 51),
          S(-136, 67),  S(-137, 67), S(-96, 53), S(-100, 40), S(-133, 24), S(-24, -16), S(-1, 7),
          S(-64, 32),   S(-80, 45),  S(-74, 44), S(-71, 35),  S(-27, 15),  S(-44, 1),   S(71, -39),
          S(26, -8),    S(9, 4),     S(-26, 16), S(-29, 20),  S(-9, 9),    S(36, -9),   S(47, -29),
          S(59, -74),   S(87, -54),  S(61, -35), S(-37, -14), S(22, -35),  S(-9, -16),  S(63, -45),
          S(63, -75)}}};

    const std::array<EvalScore, 9> knight_mobility = {S(19, 0),  S(34, -3), S(40, 2),
                                                      S(43, -1), S(45, 1),  S(44, 6),
                                                      S(42, 6),  S(41, 6),  S(42, 2)};

    const std::array<EvalScore, 14> bishop_mobility = {S(-2, -56), S(7, -41),  S(12, -32),
                                                       S(15, -23), S(21, -10), S(28, 1),
                                                       S(34, 3),   S(37, 10),  S(37, 16),
                                                       S(39, 15),  S(42, 12),  S(44, 12),
                                                       S(42, 13),  S(70, -1)};

    const std::array<EvalScore, 15> rook_mobility = {S(-10, -28), S(0, -10), S(2, -6),  S(6, -2),
                                                     S(5, 2),     S(10, 5),  S(12, 7),  S(15, 9),
                                                     S(15, 17),   S(18, 20), S(21, 20), S(23, 23),
                                                     S(22, 27),   S(25, 30), S(22, 27)};

    const std::array<EvalScore, 28> queen_mobility = {
        S(-66, -6), S(-65, -103), S(-72, -56), S(-70, -39), S(-68, -34), S(-65, -27), S(-62, -18),
        S(-63, 1),  S(-62, 8),    S(-60, 12),  S(-59, 23),  S(-59, 29),  S(-58, 37),  S(-58, 43),
        S(-56, 48), S(-56, 54),   S(-53, 58),  S(-56, 69),  S(-53, 75),  S(-51, 75),  S(-42, 74),
        S(-39, 76), S(-38, 77),   S(-32, 78),  S(-13, 59),  S(41, 42),   S(62, 25),   S(155, -4)};

    const EvalScore stacked_pawn_penalty = S(6, 22);

    const EvalScore bishop_pair_bonus = S(20, 66);

    const std::array<EvalScore, 8> passed_pawn_bonus = {S(10, 20), S(0, 2),   S(-1, 25), S(3, 43),
                                                        S(3, 42),  S(-1, 27), S(-3, 0),  S(10, 20)};

    const std::array<EvalScore, 8> rook_open_file_bonus = {S(30, 7),  S(26, 1),   S(22, 10),
                                                           S(23, 10), S(30, 14),  S(43, 0),
                                                           S(69, -7), S(114, -11)};

    const std::array<EvalScore, 8> rook_semi_open_file_bonus = {S(2, 38),  S(10, 10), S(6, 13),
                                                                S(13, 5),  S(10, 6),  S(16, -2),
                                                                S(41, -7), S(36, 14)};

    const std::array<EvalScore, 8> isolated_pawn_penalty = {S(4, -2),  S(6, 14),  S(14, 9),
                                                            S(13, 20), S(16, 19), S(12, 5),
                                                            S(4, 14),  S(17, -6)};

    const std::array<EvalScore, 64> knight_outpost_bonus = {
        S(4, 0),    S(0, 0),   S(0, 0),    S(2, 0),    S(0, 0),    S(4, 0),   S(1, 0),
        S(4, 0),    S(1, 0),   S(2, 0),    S(1, 0),    S(1, 0),    S(2, 0),   S(1, 0),
        S(1, 0),    S(0, 0),   S(-3, 0),   S(6, 5),    S(35, 8),   S(12, 5),  S(38, 8),
        S(26, 9),   S(23, 8),  S(9, 0),    S(18, -9),  S(25, 2),   S(32, 10), S(39, 0),
        S(46, 4),   S(57, -3), S(69, -4),  S(39, 8),   S(24, 10),  S(19, 10), S(32, -1),
        S(28, 0),   S(41, -3), S(47, 0),   S(49, 0),   S(30, 11),  S(1, -2),  S(-5, 2),
        S(5, 4),    S(6, -10), S(9, -11),  S(4, 6),    S(11, -8),  S(9, -4),  S(-3, -10),
        S(-11, 2),  S(-6, 8),  S(-11, -6), S(-12, -6), S(-10, -6), S(-17, 0), S(-8, -13),
        S(-8, -1),  S(1, -8),  S(-41, 1),  S(-25, 8),  S(-21, -4), S(-23, 0), S(-13, 5),
        S(-21, -17)};

    const std::array<EvalScore, 8> supported_pawn_bonus = {
        S(0, 0), S(26, 36), S(12, 11), S(7, 4), S(5, 6), S(11, 12), S(52, 73), S(0, 0)
    };

}
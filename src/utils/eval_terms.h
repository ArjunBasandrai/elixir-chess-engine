#pragma once

#include "../evaluate.h"
#include "../types.h"
namespace elixir::eval {
    const std::array<EvalScore, 6> material_score = {S(87, 39),   S(262, 367),  S(282, 362),
                                                     S(389, 637), S(887, 1154), S(0, 0)};

    const std::array<std::array<EvalScore, 64>, 6> psqt = {
        {{S(0, 0),     S(0, 0),     S(0, 0),    S(0, 0),    S(0, 0),    S(0, 0),    S(0, 0),
          S(0, 0),     S(52, 274),  S(73, 266), S(51, 265), S(89, 207), S(62, 209), S(47, 220),
          S(-32, 273), S(-32, 271), S(-9, 102), S(-3, 113), S(26, 64),  S(29, 28),  S(40, 23),
          S(71, 39),   S(32, 91),   S(23, 79),  S(-33, 89), S(-18, 89), S(-16, 66), S(-9, 49),
          S(11, 49),   S(6, 50),    S(-1, 78),  S(2, 59),   S(-44, 75), S(-29, 87), S(-25, 65),
          S(-12, 60),  S(-9, 60),   S(-7, 57),  S(-15, 76), S(-14, 52), S(-49, 70), S(-45, 84),
          S(-36, 67),  S(-33, 70),  S(-23, 70), S(-23, 64), S(-16, 73), S(-17, 49), S(-44, 76),
          S(-36, 89),  S(-34, 76),  S(-31, 71), S(-26, 83), S(0, 67),   S(0, 76),   S(-14, 52),
          S(0, 0),     S(0, 0),     S(0, 0),    S(0, 0),    S(0, 0),    S(0, 0),    S(0, 0),
          S(0, 0)},
         {S(-169, -84), S(-140, -21),  S(-77, -5),  S(-46, -16), S(-7, -14),  S(-75, -34),
          S(-121, -18), S(-118, -104), S(-38, -25), S(-20, -7),  S(7, -6),    S(30, -6),
          S(7, -12),    S(67, -28),    S(-24, -10), S(-1, -41),  S(-12, -13), S(9, -11),
          S(-11, 3),    S(27, 7),      S(27, -10),  S(49, -21),  S(12, -23),  S(0, -24),
          S(-33, 10),   S(-12, 7),     S(7, 12),    S(23, 21),   S(17, 16),   S(36, 15),
          S(2, 3),      S(0, -22),     S(-40, -9),  S(-17, -3),  S(0, 23),    S(0, 24),
          S(10, 28),    S(7, 13),      S(5, 0),     S(-24, -18), S(-50, -15), S(-26, 0),
          S(-10, 8),    S(-1, 25),     S(10, 22),   S(-2, 2),    S(-3, -5),   S(-31, -15),
          S(-56, -18),  S(-43, -10),   S(-29, -2),  S(-13, 0),   S(-14, 0),   S(-12, -4),
          S(-24, -19),  S(-27, -10),   S(-91, -28), S(-42, -32), S(-47, -12), S(-33, -12),
          S(-28, -8),   S(-20, -20),   S(-37, -27), S(-61, -25)},
         {S(-31, 14), S(-54, 21), S(-51, 14), S(-94, 25), S(-76, 20), S(-66, 12), S(-28, 11),
          S(-57, 8),  S(-18, 0),  S(0, 9),    S(-10, 10), S(-25, 14), S(2, 2),    S(-6, 7),
          S(-9, 13),  S(-15, 0),  S(-7, 18),  S(11, 14),  S(9, 17),   S(25, 7),   S(14, 12),
          S(48, 16),  S(26, 12),  S(20, 16),  S(-14, 14), S(-3, 21),  S(10, 19),  S(23, 32),
          S(20, 22),  S(13, 22),  S(-2, 17),  S(-11, 14), S(-13, 11), S(-10, 20), S(-6, 27),
          S(16, 27),  S(12, 26),  S(-5, 22),  S(-8, 17),  S(0, 0),    S(-10, 11), S(2, 19),
          S(2, 21),   S(0, 23),   S(2, 26),   S(4, 19),   S(5, 13),   S(6, 1),    S(-3, 13),
          S(5, 3),    S(9, 0),    S(-7, 14),  S(3, 10),   S(10, 6),   S(22, 9),   S(3, -3),
          S(-10, 0),  S(9, 13),   S(-6, 6),   S(-12, 10), S(-4, 10),  S(-10, 17), S(7, 0),
          S(4, -14)},
         {S(-5, 16),  S(-13, 28), S(-8, 28),  S(-8, 24),  S(2, 15),   S(10, 22),   S(-8, 27),
          S(-29, 26), S(-21, 18), S(-20, 33), S(-2, 29),  S(16, 18),  S(-2, 17),   S(15, 17),
          S(-5, 19),  S(-17, 15), S(-35, 17), S(-9, 20),  S(-11, 16), S(-12, 11),  S(14, -1),
          S(20, 3),   S(47, 1),   S(-3, 0),   S(-38, 18), S(-27, 19), S(-27, 20),  S(-20, 14),
          S(-20, 0),  S(-10, 5),  S(-13, 10), S(-27, 2),  S(-46, 9),  S(-47, 19),  S(-36, 12),
          S(-32, 10), S(-29, 4),  S(-38, 14), S(-22, 5),  S(-40, -2), S(-45, 3),   S(-45, 9),
          S(-36, 3),  S(-34, 5),  S(-24, -3), S(-24, 0),  S(-1, -17), S(-21, -21), S(-45, -3),
          S(-40, 6),  S(-27, 2),  S(-27, 2),  S(-20, -7), S(-17, -3), S(-17, -11), S(-46, -12),
          S(-27, 3),  S(-26, 4),  S(-19, 7),  S(-13, 0),  S(-9, -6),  S(-11, 2),   S(-17, -3),
          S(-28, -12)},
         {S(-25, 47), S(-34, 65), S(-14, 80), S(19, 64),  S(18, 66),   S(29, 63),   S(67, 9),
          S(1, 55),   S(-1, 29),  S(-22, 57), S(-21, 88), S(-32, 109), S(-26, 125), S(7, 84),
          S(-1, 74),  S(37, 65),  S(1, 31),   S(-2, 41),  S(-6, 72),   S(1, 81),    S(10, 92),
          S(53, 76),  S(57, 49),  S(61, 46),  S(-13, 43), S(-8, 50),   S(-7, 61),   S(-9, 80),
          S(-8, 94),  S(3, 86),   S(12, 80),  S(14, 70),  S(-8, 35),   S(-12, 56),  S(-9, 54),
          S(-4, 72),  S(-3, 68),  S(0, 66),   S(6, 61),   S(9, 61),    S(-6, 23),   S(-1, 37),
          S(-1, 48),  S(-1, 42),  S(1, 51),   S(4, 53),   S(16, 42),   S(10, 32),   S(-3, 21),
          S(1, 19),   S(8, 16),   S(12, 23),  S(10, 28),  S(19, 6),    S(24, -16),  S(28, -31),
          S(-5, 18),  S(-3, 15),  S(3, 17),   S(8, 30),   S(8, 16),    S(-2, 14),   S(13, -5),
          S(6, -10)},
         {S(67, -101),  S(47, -47),  S(69, -32), S(-35, 8),   S(-2, -3),   S(39, -3),   S(70, -8),
          S(142, -111), S(-63, -3),  S(-9, 26),  S(-46, 38),  S(41, 24),   S(-3, 42),   S(8, 52),
          S(18, 46),    S(-6, 14),   S(-86, 10), S(25, 31),   S(-44, 51),  S(-65, 62),  S(-29, 64),
          S(47, 56),    S(19, 53),   S(-23, 23), S(-59, 2),   S(-66, 37),  S(-87, 57),  S(-134, 70),
          S(-127, 72),  S(-90, 66),  S(-83, 55), S(-116, 28), S(-65, -6),  S(-66, 24),  S(-100, 49),
          S(-134, 66),  S(-132, 64), S(-92, 51), S(-95, 38),  S(-129, 23), S(-19, -16), S(-1, 7),
          S(-61, 31),   S(-77, 43),  S(-71, 43), S(-69, 34),  S(-26, 14),  S(-42, 2),   S(71, -36),
          S(26, -7),    S(9, 5),     S(-24, 16), S(-27, 20),  S(-8, 10),   S(36, -8),   S(46, -27),
          S(58, -73),   S(85, -52),  S(59, -33), S(-35, -12), S(21, -33),  S(-8, -15),  S(62, -43),
          S(63, -73)}}};

    const std::array<EvalScore, 9> knight_mobility = {S(19, -3), S(31, -7), S(35, 0),
                                                      S(39, -4), S(41, 0),  S(40, 3),
                                                      S(38, 4),  S(37, 4),  S(38, 0)};

    const std::array<EvalScore, 14> bishop_mobility = {S(-5, -55), S(3, -42), S(9, -33), S(11, -25),
                                                       S(18, -12), S(24, 0),  S(30, 1),  S(33, 8),
                                                       S(34, 13),  S(36, 12), S(39, 9),  S(41, 9),
                                                       S(39, 12),  S(66, -1)};

    const std::array<EvalScore, 15> rook_mobility = {S(-11, -29), S(-1, -11), S(1, -8),  S(5, -5),
                                                     S(4, 1),     S(8, 3),    S(10, 5),  S(13, 7),
                                                     S(13, 14),   S(16, 17),  S(18, 19), S(20, 22),
                                                     S(19, 25),   S(23, 28),  S(19, 26)};

    const std::array<EvalScore, 28> queen_mobility = {
        S(-67, -8), S(-65, -106), S(-72, -54), S(-69, -39), S(-67, -33), S(-65, -27), S(-61, -19),
        S(-63, 0),  S(-61, 7),    S(-59, 10),  S(-59, 21),  S(-59, 26),  S(-58, 34),  S(-58, 40),
        S(-56, 46), S(-56, 52),   S(-54, 55),  S(-57, 66),  S(-54, 72),  S(-52, 72),  S(-43, 71),
        S(-40, 73), S(-39, 74),   S(-34, 76),  S(-15, 57),  S(38, 40),   S(59, 24),   S(150, -6)};

    const EvalScore stacked_pawn_penalty = S(4, 26);

    const EvalScore bishop_pair_bonus = S(19, 63);

    const std::array<EvalScore, 8> passed_pawn_bonus = {S(10, 20), S(0, 4),  S(4, 123), S(13, 54),
                                                        S(-5, 26), S(-4, 0), S(-2, -3), S(10, 20)};

    const std::array<EvalScore, 8> rook_open_file_bonus = {S(30, 6),  S(26, 1),   S(22, 9),
                                                           S(23, 10), S(28, 13),  S(43, -1),
                                                           S(68, -7), S(111, -13)};

    const std::array<EvalScore, 8> rook_semi_open_file_bonus = {S(2, 39),  S(9, 11), S(7, 13),
                                                                S(12, 5),  S(9, 6),  S(17, -1),
                                                                S(39, -6), S(34, 14)};

    const std::array<EvalScore, 8> isolated_pawn_penalty = {S(0, -7), S(2, 10),  S(9, 5),
                                                            S(8, 11), S(11, 11), S(8, 2),
                                                            S(0, 10), S(12, -10)};

    const std::array<EvalScore, 64> knight_outpost_bonus = {
        S(5, 0),    S(2, 0),   S(0, 0),    S(2, 0),    S(0, 0),    S(5, 0),   S(3, -1),
        S(3, 1),    S(0, 0),   S(0, 0),    S(0, 0),    S(1, 0),    S(1, 0),   S(0, 0),
        S(0, 0),    S(0, 0),   S(-7, 0),   S(9, 7),    S(53, 11),  S(20, 8),  S(59, 9),
        S(42, 13),  S(31, 11), S(13, 0),   S(19, -14), S(24, 3),   S(29, 12), S(36, 1),
        S(41, 7),   S(53, 0),  S(64, -1),  S(38, 7),   S(21, 9),   S(17, 9),  S(29, -1),
        S(25, 0),   S(38, -3), S(44, 0),   S(48, -2),  S(26, 12),  S(0, -1),  S(-6, 4),
        S(3, 5),    S(5, -9),  S(6, -10),  S(3, 6),    S(10, -7),  S(8, -4),  S(-4, -7),
        S(-13, 7),  S(-5, 9),  S(-10, -4), S(-11, -6), S(-12, -3), S(-22, 4), S(-9, -10),
        S(-10, 0),  S(1, -4),  S(-47, 8),  S(-25, 9),  S(-19, -3), S(-23, 4), S(-13, 9),
        S(-27, -23)};

    const std::array<EvalScore, 8> supported_pawn_bonus = {S(0, 0),   S(110, 148), S(19, 53),
                                                           S(12, 16), S(13, 5),    S(20, 9),
                                                           S(52, 73), S(0, 0)};

    const std::array<EvalScore, 8> pawn_duo_bonus = {S(0, 0),  S(23, 79), S(65, 94), S(21, 31),
                                                     S(11, 9), S(9, 2),   S(5, 0),   S(0, 0)};

}
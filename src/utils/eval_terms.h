#pragma once

#include "../evaluate.h"
#include "../types.h"
namespace elixir::eval {
    const std::array<EvalScore, 6> material_score = {S(67, 30),   S(238, 330), S(254, 328),
                                                     S(341, 554), S(763, 975), S(0, 0)};

    const std::array<std::array<EvalScore, 64>, 6> psqt = {
        {{S(0, 0),    S(0, 0),     S(0, 0),    S(0, 0),    S(0, 0),    S(0, 0),    S(0, 0),
          S(0, 0),    S(43, 249),  S(49, 247), S(30, 254), S(67, 219), S(62, 222), S(56, 228),
          S(4, 265),  S(-16, 262), S(-7, 81),  S(-7, 95),  S(15, 60),  S(18, 37),  S(32, 34),
          S(45, 46),  S(19, 83),   S(-9, 78),  S(-25, 76), S(-14, 80), S(-11, 60), S(-7, 49),
          S(13, 47),  S(0, 52),    S(-2, 73),  S(-15, 61), S(-32, 67), S(-21, 80), S(-17, 60),
          S(-7, 55),  S(-2, 53),   S(-7, 55),  S(-10, 71), S(-24, 54), S(-38, 64), S(-35, 77),
          S(-26, 60), S(-24, 62),  S(-17, 61), S(-20, 58), S(-15, 67), S(-28, 51), S(-33, 68),
          S(-27, 80), S(-24, 66),  S(-30, 63), S(-19, 70), S(-10, 60), S(-3, 68),  S(-26, 53),
          S(0, 0),    S(0, 0),     S(0, 0),    S(0, 0),    S(0, 0),    S(0, 0),    S(0, 0),
          S(0, 0)},
         {S(-157, -76), S(-127, -23), S(-73, -7),  S(-45, -18), S(-13, -16), S(-71, -34),
          S(-112, -20), S(-113, -95), S(-38, -25), S(-18, -10), S(5, -9),    S(23, -9),
          S(0, -14),    S(54, -28),   S(-18, -13), S(-4, -41),  S(5, -15),   S(5, -18),
          S(-17, 12),   S(4, -1),     S(4, 10),    S(22, -14),  S(28, -18),  S(2, -13),
          S(-30, 7),    S(-12, 1),    S(4, 7),     S(16, 15),   S(8, 10),    S(27, 9),
          S(-2, 1),     S(-4, -21),   S(-36, -14), S(-16, -8),  S(-2, 14),   S(-3, 15),
          S(3, 17),     S(0, 6),      S(2, -5),    S(-25, -21), S(-46, -18), S(-25, -5),
          S(-12, 0),    S(-4, 14),    S(6, 11),    S(-6, -3),   S(-7, -10),  S(-31, -17),
          S(-51, -22),  S(-41, -14),  S(-27, -8),  S(-17, -4),  S(-16, -6),  S(-13, -10),
          S(-21, -23),  S(-24, -15),  S(-78, -29), S(-42, -32), S(-44, -16), S(-33, -15),
          S(-28, -12),  S(-22, -22),  S(-40, -26), S(-51, -27)},
         {S(-34, 8),  S(-50, 11), S(-51, 6), S(-84, 13), S(-75, 12), S(-68, 3),  S(-30, 3),
          S(-56, 0),  S(-19, -6), S(-1, 2),  S(-10, 2),  S(-25, 7),  S(-4, -2),  S(-5, 0),
          S(-10, 4),  S(-27, -3), S(-9, 8),  S(7, 5),    S(7, 9),    S(16, 1),   S(12, 4),
          S(37, 8),   S(18, 6),   S(9, 7),   S(-17, 5),  S(-5, 12),  S(4, 10),   S(17, 22),
          S(11, 15),  S(7, 14),   S(-7, 10), S(-15, 5),  S(-13, 3),  S(-12, 11), S(-8, 18),
          S(9, 18),   S(6, 17),   S(-8, 13), S(-9, 9),   S(-5, -5),  S(-14, 3),  S(-1, 10),
          S(-2, 12),  S(-4, 14),  S(-1, 16), S(0, 11),   S(0, 6),    S(2, -4),   S(-6, 6),
          S(0, -2),   S(4, -5),   S(-11, 5), S(-2, 4),   S(6, 0),    S(17, 0),   S(0, -8),
          S(-14, -6), S(2, 4),    S(-13, 0), S(-15, 3),  S(-8, 1),   S(-13, 8),  S(-3, -4),
          S(3, -23)},
         {S(-11, 12), S(-15, 21), S(-14, 23), S(-16, 22), S(-6, 12),  S(0, 17),    S(-6, 18),
          S(-5, 13),  S(-20, 15), S(-21, 28), S(-5, 25),  S(5, 19),   S(-5, 15),   S(14, 12),
          S(4, 9),    S(3, 3),    S(-31, 12), S(-11, 15), S(-15, 12), S(-16, 10),  S(8, -2),
          S(12, 1),   S(35, -2),  S(-3, -5),  S(-34, 12), S(-24, 12), S(-22, 13),  S(-19, 10),
          S(-17, -2), S(-10, 1),  S(-12, 3),  S(-19, -4), S(-39, 3),  S(-40, 11),  S(-30, 6),
          S(-28, 6),  S(-23, 0),  S(-34, 8),  S(-18, -1), S(-29, -8), S(-39, -1),  S(-38, 3),
          S(-31, 0),  S(-31, 3),  S(-20, -5), S(-22, -2), S(-1, -18), S(-15, -22), S(-39, -5),
          S(-35, 1),  S(-24, 0),  S(-25, 0),  S(-18, -8), S(-15, -7), S(-7, -17),  S(-31, -18),
          S(-24, 0),  S(-25, 0),  S(-19, 2),  S(-14, -1), S(-9, -7),  S(-12, -2),  S(-17, -7),
          S(-18, -15)},
         {S(-28, 41), S(-28, 46), S(-13, 57), S(8, 43),   S(3, 47),   S(13, 42),  S(55, -5),
          S(0, 32),   S(0, 25),   S(-15, 48), S(-15, 73), S(-24, 87), S(-25, 98), S(11, 57),
          S(14, 44),  S(45, 36),  S(-1, 30),  S(-2, 38),  S(-4, 62),  S(-1, 66),  S(8, 69),
          S(30, 52),  S(39, 30),  S(28, 34),  S(-10, 41), S(-5, 48),  S(-4, 55),  S(-7, 72),
          S(-4, 75),  S(1, 62),   S(6, 58),   S(9, 43),   S(-6, 36),  S(-9, 55),  S(-5, 53),
          S(-2, 66),  S(0, 62),   S(0, 51),   S(9, 44),   S(8, 43),   S(-5, 25),  S(-1, 40),
          S(0, 48),   S(-1, 44),  S(2, 51),   S(4, 48),   S(15, 34),  S(10, 27),  S(-2, 22),
          S(1, 23),   S(6, 22),   S(9, 29),   S(8, 34),   S(16, 11),  S(19, -3),  S(20, -17),
          S(-6, 21),  S(-5, 19),  S(0, 26),   S(4, 35),   S(5, 22),   S(-3, 16),  S(3, 0),
          S(3, -3)},
         {S(67, -73),   S(76, -27), S(78, -15), S(-25, 18), S(-11, 0),   S(19, 0),    S(65, -9),
          S(139, -100), S(-51, 0),  S(28, 20),  S(-14, 31), S(55, 20),   S(2, 25),    S(7, 35),
          S(33, 25),    S(-14, 5),  S(-72, 5),  S(73, 13),  S(-2, 31),   S(-34, 43),  S(-7, 38),
          S(57, 24),    S(19, 25),  S(-35, 3),  S(-46, -7), S(7, 11),    S(-44, 33),  S(-85, 44),
          S(-95, 42),   S(-55, 33), S(-50, 21), S(-109, 5), S(-53, -17), S(-12, 7),   S(-57, 29),
          S(-91, 43),   S(-93, 40), S(-54, 25), S(-50, 13), S(-111, -1), S(-33, -19), S(3, 4),
          S(-38, 23),   S(-43, 31), S(-43, 30), S(-42, 22), S(-18, 6),   S(-46, -12), S(30, -30),
          S(15, 1),     S(9, 11),   S(-10, 20), S(-15, 21), S(-3, 12),   S(12, -2),   S(23, -29),
          S(23, -51),   S(41, -21), S(36, -8),  S(-20, 9),  S(20, -12),  S(-10, 3),   S(30, -17),
          S(36, -57)}}};

    const std::array<EvalScore, 9> knight_mobility = {S(7, -20),  S(18, -19), S(22, -13),
                                                      S(25, -15), S(26, -13), S(26, -8),
                                                      S(24, -7),  S(23, -7),  S(25, -10)};

    const std::array<EvalScore, 14> bishop_mobility = {S(-10, -58), S(-3, -48), S(0, -41),
                                                       S(2, -32),   S(7, -22),  S(13, -13),
                                                       S(17, -11),  S(18, -6),  S(19, -1),
                                                       S(20, -3),   S(21, -5),  S(24, -5),
                                                       S(20, -2),   S(40, -13)};

    const std::array<EvalScore, 15> rook_mobility = {S(-10, -32), S(-3, -17), S(0, -15), S(2, -11),
                                                     S(0, -5),    S(4, -3),   S(5, -1),  S(7, 0),
                                                     S(6, 6),     S(8, 9),    S(9, 10),  S(11, 13),
                                                     S(10, 15),   S(12, 17),  S(10, 14)};

    const std::array<EvalScore, 28> queen_mobility = {
        S(-62, -16), S(-59, -104), S(-66, -40), S(-64, -32), S(-63, -26), S(-61, -20), S(-59, -14),
        S(-60, 2),   S(-59, 8),    S(-58, 11),  S(-58, 18),  S(-58, 23),  S(-58, 28),  S(-57, 32),
        S(-57, 37),  S(-56, 39),   S(-55, 42),  S(-57, 49),  S(-54, 51),  S(-53, 51),  S(-44, 47),
        S(-42, 46),  S(-41, 46),   S(-37, 43),  S(-18, 23),  S(21, 9),    S(34, 1),    S(115, -39)};

    const EvalScore stacked_pawn_penalty = S(1, 22);

    const EvalScore bishop_pair_bonus = S(17, 52);

    const std::array<EvalScore, 8> passed_pawn_bonus = {S(10, 20),  S(2, -1),  S(6, 125),
                                                        S(10, 60),  S(-9, 24), S(-7, -8),
                                                        S(-2, -17), S(10, 20)};

    const std::array<EvalScore, 8> rook_open_file_bonus = {S(24, 6),  S(22, 3), S(19, 9), S(22, 6),
                                                           S(22, 12), S(33, 1), S(43, 2), S(56, 2)};

    const std::array<EvalScore, 8> rook_semi_open_file_bonus = {S(0, 35), S(7, 11), S(6, 12),
                                                                S(11, 4), S(7, 7),  S(14, 2),
                                                                S(21, 4), S(2, 25)};

    const std::array<EvalScore, 8> isolated_pawn_penalty = {S(2, -8), S(2, 8), S(7, 3), S(5, 10),
                                                            S(9, 10), S(2, 3), S(0, 9), S(0, -6)};

    const std::array<EvalScore, 64> knight_outpost_bonus = {
        S(9, 0),    S(7, -2),  S(0, -2),   S(-2, -2),  S(-6, -2),  S(1, -1),  S(4, -3),
        S(0, 2),    S(0, 0),   S(-1, -3),  S(0, -3),   S(-2, -3),  S(-1, -2), S(-5, -1),
        S(0, -3),   S(-3, 0),  S(-24, -3), S(8, 9),    S(50, -7),  S(30, 8),  S(63, -16),
        S(50, 1),   S(4, 2),   S(-1, -14), S(14, -17), S(18, 0),   S(22, 6),  S(29, -2),
        S(34, 3),   S(40, -2), S(51, -5),  S(25, 1),   S(16, 8),   S(16, 6),  S(22, -2),
        S(21, 0),   S(32, -3), S(34, 0),   S(42, -3),  S(23, 7),   S(0, 0),   S(-1, 1),
        S(4, 3),    S(3, -7),  S(5, -8),   S(3, 3),    S(12, -6),  S(7, -3),  S(0, -5),
        S(-10, 6),  S(-4, 8),  S(-8, -4),  S(-9, -5),  S(-10, -3), S(-17, 4), S(0, -11),
        S(-6, 1),   S(1, -9),  S(-34, 9),  S(-21, 8),  S(-18, -4), S(-20, 3), S(-21, 11),
        S(-15, -23)};

    const std::array<EvalScore, 8> supported_pawn_bonus = {S(0, 0),   S(122, 130), S(19, 52),
                                                           S(13, 14), S(12, 4),    S(17, 8),
                                                           S(52, 73), S(0, 0)};

    const std::array<EvalScore, 8> pawn_duo_bonus = {S(0, 0),  S(-15, 166), S(52, 75), S(20, 24),
                                                     S(10, 7), S(8, 1),     S(3, 0),   S(0, 0)};

    const std::array<EvalScore, 8> king_open_file_penalty = {S(82, 1),  S(91, -1), S(56, 2),
                                                             S(51, 0),  S(42, -3), S(72, -8),
                                                             S(67, -6), S(62, -13)};

    const std::array<EvalScore, 8> king_semi_open_file_penalty = {S(31, -48), S(46, -23),
                                                                  S(30, -19), S(16, -8),
                                                                  S(15, -6),  S(30, -15),
                                                                  S(40, -26), S(42, -38)};

    const std::array<EvalScore, 24> pawn_shelter_table = {
        S(-53, 40), S(13, 13), S(-11, -1), S(-1, -4), S(5, -5), S(8, -8), S(9, -8), S(-7, -5),
        S(0, 0),    S(-9, 22), S(-18, -5), S(-1, -2), S(3, -6), S(3, -9), S(1, -8), S(-12, 0),
        S(-20, 31), S(32, 0),  S(-20, 1),  S(-7, -1), S(0, -1), S(5, -8), S(3, -8), S(0, -4)};

    const std::array<EvalScore, 24> pawn_storm_table = {
        S(8, 0),  S(13, -7), S(9, 0),  S(2, 1),   S(-6, 8),  S(12, 15),  S(-10, 22), S(-19, 2),
        S(0, 0),  S(8, 0),   S(1, 4),  S(-7, 0),  S(-14, 2), S(-24, 16), S(-37, 17), S(-4, -1),
        S(21, 6), S(11, -3), S(-9, 1), S(-5, -4), S(-5, -7), S(-6, -5),  S(-22, 10), S(-16, 0)};

    const std::array<EvalScore, 8> our_king_pp_proximity = {S(0, 0),    S(-6, 25),  S(-9, 11),
                                                            S(-9, -5),  S(-5, -17), S(0, -21),
                                                            S(12, -22), S(7, -24)};

    const std::array<EvalScore, 8> their_king_pp_proximity = {S(0, 0),  S(-67, -19), S(4, -23),
                                                              S(5, -1), S(9, 9),     S(6, 18),
                                                              S(0, 24), S(-12, 21)};

    const std::array<EvalScore, 8> knight_king_proximity_bonus = {S(0, 0),   S(4, 3), S(2, -3),
                                                                  S(17, -9), S(0, 0), S(0, 0),
                                                                  S(0, 0),   S(0, 0)};

    const std::array<EvalScore, 8> bishop_king_proximity_bonus = {S(0, 0),   S(3, 2),    S(9, -1),
                                                                  S(27, -9), S(12, -17), S(0, 0),
                                                                  S(0, 0),   S(0, 0)};

    const std::array<EvalScore, 8> rook_king_proximity_bonus = {S(0, 0),   S(8, -8),   S(15, -11),
                                                                S(21, -8), S(41, -15), S(43, -17),
                                                                S(0, 0),   S(0, 0)};

    const std::array<EvalScore, 8> queen_king_proximity_bonus = {S(0, 0),   S(0, 7),   S(2, 14),
                                                                 S(11, 24), S(20, 36), S(39, 38),
                                                                 S(113, 6), S(92, 10)};

    const EvalScore pawn_minor_threat = S(33, 17);

    const EvalScore pawn_major_threat = S(41, -5);
}
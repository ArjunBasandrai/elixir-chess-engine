#pragma once

#include "../evaluate.h"
#include "../types.h"
namespace elixir::eval {
    const std::array<EvalScore, 6> material_score = {S(69, 32),   S(242, 335), S(257, 332),
                                                     S(348, 566), S(780, 997), S(0, 0)};

    const std::array<std::array<EvalScore, 64>, 6> psqt = {
        {{S(0, 0),    S(0, 0),     S(0, 0),    S(0, 0),    S(0, 0),    S(0, 0),    S(0, 0),
          S(0, 0),    S(42, 250),  S(55, 247), S(31, 255), S(67, 219), S(64, 222), S(54, 229),
          S(8, 266),  S(-19, 264), S(-7, 82),  S(-6, 96),  S(16, 60),  S(20, 37),  S(34, 34),
          S(47, 46),  S(20, 84),   S(-9, 78),  S(-25, 77), S(-14, 81), S(-11, 61), S(-7, 49),
          S(13, 47),  S(0, 52),    S(-2, 74),  S(-15, 61), S(-33, 68), S(-22, 81), S(-17, 60),
          S(-7, 56),  S(-2, 53),   S(-7, 55),  S(-10, 72), S(-25, 54), S(-39, 64), S(-36, 78),
          S(-26, 61), S(-24, 63),  S(-17, 62), S(-20, 58), S(-16, 68), S(-29, 51), S(-34, 68),
          S(-27, 81), S(-25, 67),  S(-30, 64), S(-20, 71), S(-11, 60), S(-4, 68),  S(-27, 53),
          S(0, 0),    S(0, 0),     S(0, 0),    S(0, 0),    S(0, 0),    S(0, 0),    S(0, 0),
          S(0, 0)},
         {S(-159, -77), S(-128, -23), S(-74, -7),  S(-45, -18), S(-13, -16), S(-72, -34),
          S(-113, -20), S(-114, -96), S(-38, -25), S(-17, -9),  S(6, -8),    S(24, -8),
          S(0, -13),    S(56, -28),   S(-18, -12), S(-3, -41),  S(1, -16),   S(2, -20),
          S(-23, 9),    S(3, -1),     S(0, 5),     S(19, -18),  S(19, -22),  S(-4, -16),
          S(-30, 8),    S(-11, 2),    S(5, 8),     S(17, 17),   S(9, 12),    S(28, 10),
          S(-2, 2),     S(-3, -20),   S(-36, -13), S(-16, -7),  S(-1, 16),   S(-3, 16),
          S(4, 19),     S(1, 7),      S(3, -4),    S(-25, -20), S(-46, -17), S(-25, -4),
          S(-12, 1),    S(-3, 15),    S(7, 13),    S(-5, -2),   S(-6, -9),   S(-30, -17),
          S(-51, -21),  S(-41, -13),  S(-27, -7),  S(-16, -3),  S(-16, -5),  S(-13, -9),
          S(-20, -23),  S(-24, -14),  S(-78, -29), S(-42, -32), S(-44, -15), S(-33, -14),
          S(-27, -12),  S(-22, -22),  S(-40, -26), S(-51, -26)},
         {S(-34, 9),  S(-50, 12), S(-51, 7), S(-85, 15), S(-75, 13), S(-68, 4),  S(-29, 4),
          S(-56, 0),  S(-19, -5), S(-1, 3),  S(-9, 3),   S(-25, 8),  S(-3, -1),  S(-5, 0),
          S(-10, 5),  S(-27, -2), S(-8, 10), S(8, 6),    S(8, 10),   S(17, 2),   S(13, 5),
          S(38, 10),  S(19, 7),   S(10, 8),  S(-16, 6),  S(-4, 13),  S(5, 11),   S(18, 23),
          S(12, 16),  S(8, 15),   S(-6, 11), S(-15, 6),  S(-13, 4),  S(-12, 12), S(-7, 19),
          S(10, 19),  S(7, 18),   S(-7, 15), S(-8, 10),  S(-4, -4),  S(-14, 4),  S(0, 12),
          S(-1, 13),  S(-3, 15),  S(0, 18),  S(0, 12),   S(1, 7),    S(3, -3),   S(-6, 7),
          S(0, -1),   S(5, -4),   S(-11, 7), S(-1, 5),   S(7, 0),    S(18, 1),   S(1, -7),
          S(-13, -5), S(3, 5),    S(-12, 0), S(-14, 4),  S(-7, 2),   S(-13, 9),  S(-2, -3),
          S(4, -22)},
         {S(-10, 13), S(-15, 22), S(-14, 24), S(-16, 23), S(-6, 13),  S(2, 18),    S(-5, 19),
          S(-5, 14),  S(-21, 16), S(-21, 29), S(-4, 26),  S(5, 19),   S(-4, 15),   S(15, 13),
          S(4, 9),    S(4, 4),    S(-32, 13), S(-11, 16), S(-15, 13), S(-16, 11),  S(8, -1),
          S(10, 2),   S(33, -1),  S(-5, -4),  S(-35, 12), S(-25, 13), S(-23, 14),  S(-19, 11),
          S(-17, -2), S(-11, 2),  S(-14, 4),  S(-21, -3), S(-40, 4),  S(-41, 12),  S(-31, 6),
          S(-29, 7),  S(-24, 0),  S(-35, 9),  S(-20, 0),  S(-30, -8), S(-40, 0),   S(-39, 4),
          S(-32, 0),  S(-32, 4),  S(-20, -5), S(-23, -2), S(-2, -18), S(-15, -22), S(-39, -5),
          S(-35, 1),  S(-24, 0),  S(-25, 0),  S(-18, -7), S(-15, -6), S(-7, -17),  S(-31, -18),
          S(-24, 0),  S(-25, 0),  S(-19, 3),  S(-14, -1), S(-9, -7),  S(-12, -1),  S(-18, -6),
          S(-18, -15)},
         {S(-28, 42), S(-29, 48), S(-14, 59), S(8, 44),   S(4, 48),   S(14, 43),   S(57, -6),
          S(-1, 34),  S(0, 26),   S(-15, 49), S(-15, 75), S(-25, 89), S(-26, 100), S(11, 58),
          S(15, 45),  S(46, 37),  S(0, 30),   S(-2, 39),  S(-4, 63),  S(-1, 68),   S(8, 70),
          S(31, 53),  S(38, 32),  S(29, 34),  S(-11, 42), S(-6, 50),  S(-4, 56),   S(-7, 73),
          S(-5, 76),  S(0, 63),   S(6, 59),   S(8, 45),   S(-6, 36),  S(-10, 57),  S(-5, 54),
          S(-2, 68),  S(0, 63),   S(0, 52),   S(8, 46),   S(8, 43),   S(-4, 25),   S(0, 41),
          S(0, 49),   S(-1, 45),  S(2, 52),   S(5, 49),   S(16, 35),  S(10, 28),   S(-1, 22),
          S(1, 24),   S(7, 22),   S(10, 29),  S(8, 34),   S(17, 11),  S(20, -3),   S(21, -18),
          S(-5, 21),  S(-5, 19),  S(0, 26),   S(5, 36),   S(6, 23),   S(-3, 16),   S(4, 0),
          S(3, -4)},
         {S(68, -74),   S(74, -27), S(78, -15), S(-27, 19), S(-10, 0),   S(22, -1),   S(66, -9),
          S(140, -101), S(-53, 1),  S(24, 21),  S(-18, 33), S(53, 22),   S(0, 26),    S(5, 36),
          S(30, 26),    S(-12, 5),  S(-75, 6),  S(69, 14),  S(-6, 33),   S(-38, 45),  S(-10, 40),
          S(54, 25),    S(18, 26),  S(-35, 4),  S(-49, -7), S(3, 13),    S(-48, 34),  S(-89, 46),
          S(-99, 43),   S(-59, 34), S(-54, 22), S(-113, 6), S(-56, -17), S(-14, 7),   S(-59, 30),
          S(-93, 45),   S(-95, 41), S(-56, 26), S(-51, 13), S(-113, -1), S(-33, -19), S(4, 4),
          S(-38, 23),   S(-43, 32), S(-43, 30), S(-42, 22), S(-17, 6),   S(-46, -12), S(32, -31),
          S(16, 1),     S(10, 11),  S(-10, 20), S(-15, 21), S(-2, 12),   S(13, -2),   S(24, -30),
          S(25, -52),   S(43, -22), S(38, -8),  S(-20, 9),  S(22, -12),  S(-9, 3),    S(32, -18),
          S(38, -58)}}};

    const std::array<EvalScore, 9> knight_mobility = {S(8, -19),  S(19, -18), S(23, -12),
                                                      S(26, -14), S(28, -11), S(27, -7),
                                                      S(26, -6),  S(25, -6),  S(26, -9)};

    const std::array<EvalScore, 14> bishop_mobility = {S(-9, -57), S(-2, -47), S(2, -39), S(4, -31),
                                                       S(9, -20),  S(15, -10), S(19, -9), S(21, -3),
                                                       S(21, 0),   S(22, 0),   S(24, -3), S(26, -3),
                                                       S(22, 0),   S(43, -11)};

    const std::array<EvalScore, 15> rook_mobility = {S(-10, -32), S(-3, -16), S(0, -14), S(3, -10),
                                                     S(1, -4),    S(5, -3),   S(6, 0),   S(7, 1),
                                                     S(7, 7),     S(8, 10),   S(10, 11), S(11, 14),
                                                     S(10, 17),   S(13, 18),  S(11, 15)};

    const std::array<EvalScore, 28> queen_mobility = {
        S(-62, -15), S(-59, -106), S(-66, -42), S(-64, -32), S(-63, -26), S(-62, -20), S(-59, -13),
        S(-61, 3),   S(-60, 9),    S(-58, 12),  S(-58, 19),  S(-58, 24),  S(-58, 29),  S(-58, 34),
        S(-57, 38),  S(-57, 41),   S(-55, 43),  S(-57, 51),  S(-54, 53),  S(-53, 53),  S(-44, 49),
        S(-41, 48),  S(-41, 47),   S(-36, 45),  S(-19, 26),  S(21, 12),   S(36, 3),    S(119, -35)};

    const EvalScore stacked_pawn_penalty = S(1, 23);

    const EvalScore bishop_pair_bonus = S(18, 53);

    const std::array<EvalScore, 8> passed_pawn_bonus = {S(10, 20),  S(6, 1),   S(6, 128),
                                                        S(10, 60),  S(-9, 24), S(-8, -8),
                                                        S(-3, -18), S(10, 20)};

    const std::array<EvalScore, 8> rook_open_file_bonus = {S(25, 6),  S(23, 3), S(19, 9), S(23, 7),
                                                           S(22, 12), S(34, 2), S(44, 2), S(58, 2)};

    const std::array<EvalScore, 8> rook_semi_open_file_bonus = {S(0, 36), S(7, 11), S(6, 13),
                                                                S(12, 4), S(7, 7),  S(14, 2),
                                                                S(22, 4), S(2, 25)};

    const std::array<EvalScore, 8> isolated_pawn_penalty = {S(2, -9), S(2, 9), S(7, 3), S(5, 10),
                                                            S(9, 10), S(2, 3), S(0, 9), S(1, -7)};

    const std::array<EvalScore, 64> knight_outpost_bonus = {
        S(8, 0),    S(7, -2),  S(-1, -2),  S(-2, -2),  S(-6, -2),  S(1, -1),  S(4, -3),
        S(0, 2),    S(0, 0),   S(0, -2),   S(0, -2),   S(-2, -2),  S(-1, -1), S(-4, -1),
        S(0, -2),   S(-2, 0),  S(-20, -2), S(12, 11),  S(58, -2),  S(31, 10), S(71, -10),
        S(56, 6),   S(14, 5),  S(5, -10),  S(15, -17), S(19, 0),   S(23, 7),  S(30, -2),
        S(35, 3),   S(41, -2), S(53, -5),  S(26, 1),   S(16, 8),   S(17, 6),  S(22, -2),
        S(21, 0),   S(33, -3), S(35, 0),   S(43, -3),  S(23, 7),   S(0, 0),   S(-1, 1),
        S(4, 3),    S(3, -7),  S(5, -8),   S(3, 3),    S(12, -6),  S(7, -3),  S(0, -5),
        S(-10, 6),  S(-3, 8),  S(-8, -4),  S(-9, -5),  S(-10, -3), S(-17, 4), S(0, -11),
        S(-6, 1),   S(1, -9),  S(-35, 9),  S(-21, 8),  S(-19, -4), S(-21, 4), S(-22, 12),
        S(-15, -23)};

    const std::array<EvalScore, 8> supported_pawn_bonus = {S(0, 0),   S(123, 134), S(19, 54),
                                                           S(13, 14), S(13, 4),    S(18, 8),
                                                           S(52, 73), S(0, 0)};

    const std::array<EvalScore, 8> pawn_duo_bonus = {S(0, 0),  S(-7, 168), S(54, 77), S(20, 25),
                                                     S(10, 7), S(8, 1),    S(3, 0),   S(0, 0)};

    const std::array<EvalScore, 8> king_open_file_penalty = {S(83, 1),  S(93, -1), S(57, 2),
                                                             S(52, 0),  S(43, -3), S(73, -8),
                                                             S(68, -6), S(64, -13)};

    const std::array<EvalScore, 8> king_semi_open_file_penalty = {S(31, -49), S(46, -23),
                                                                  S(31, -19), S(16, -8),
                                                                  S(15, -6),  S(31, -15),
                                                                  S(40, -26), S(42, -39)};

    const std::array<EvalScore, 24> pawn_shelter_table = {
        S(-51, 40), S(17, 12), S(-11, -1), S(-1, -5), S(6, -5), S(8, -8), S(9, -9), S(-7, -5),
        S(0, 0),    S(-7, 22), S(-18, -5), S(-1, -2), S(3, -6), S(3, -9), S(2, -8), S(-12, 0),
        S(-19, 31), S(35, 0),  S(-20, 1),  S(-8, -1), S(0, -1), S(5, -9), S(3, -9), S(0, -4)};

    const std::array<EvalScore, 24> pawn_storm_table = {
        S(9, 0),  S(13, -7), S(9, 0),   S(2, 2),   S(-6, 9),  S(12, 16),  S(-8, 22),  S(-20, 2),
        S(0, 0),  S(8, -1),  S(1, 3),   S(-7, 0),  S(-14, 2), S(-24, 15), S(-33, 15), S(-4, -1),
        S(21, 6), S(11, -3), S(-10, 1), S(-5, -4), S(-6, -7), S(-7, -6),  S(-21, 9),  S(-17, 0)};

    const std::array<EvalScore, 8> our_king_pp_proximity = {S(0, 0),    S(-6, 25),  S(-9, 11),
                                                            S(-9, -5),  S(-5, -17), S(0, -21),
                                                            S(13, -22), S(7, -24)};

    const std::array<EvalScore, 8> their_king_pp_proximity = {S(0, 0),  S(-68, -20), S(4, -23),
                                                              S(6, -1), S(10, 9),    S(7, 19),
                                                              S(1, 25), S(-12, 22)};

    const std::array<EvalScore, 8> knight_king_proximity_bonus = {S(0, 0),   S(4, 4), S(2, -3),
                                                                  S(17, -9), S(0, 0), S(0, 0),
                                                                  S(0, 0),   S(0, 0)};

    const std::array<EvalScore, 8> bishop_king_proximity_bonus = {S(0, 0),   S(3, 2),    S(9, -1),
                                                                  S(28, -9), S(12, -17), S(0, 0),
                                                                  S(0, 0),   S(0, 0)};

    const std::array<EvalScore, 8> rook_king_proximity_bonus = {S(0, 0),   S(8, -9),   S(15, -11),
                                                                S(21, -8), S(41, -16), S(43, -16),
                                                                S(0, 0),   S(0, 0)};

    const std::array<EvalScore, 8> queen_king_proximity_bonus = {S(0, 0),   S(1, 7),   S(2, 14),
                                                                 S(11, 25), S(21, 37), S(39, 40),
                                                                 S(114, 8), S(78, 23)};

    const EvalScore pawn_minor_threat = S(33, 17);

}
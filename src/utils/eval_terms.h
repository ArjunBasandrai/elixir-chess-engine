#pragma once

#include "../evaluate.h"
#include "../types.h"

namespace elixir::eval {
        const EvalScore material_score[7] = {S(103, 128), S(313, 370), S(351, 366), S(495, 659), S(1073, 1208), S(0, 0), S(0, 0)};
        const EvalScore psqt[6][64] = {
            {
                S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), 
                S(48, 211), S(74, 203), S(54, 199), S(80, 144), S(72, 137), S(61, 155), S(-10, 208), S(-54, 217), 
                S(-31, 132), S(-7, 141), S(26, 107), S(26, 81), S(36, 69), S(64, 59), S(40, 108), S(-12, 103), 
                S(-40, 49), S(-11, 39), S(-9, 20), S(-2, 7), S(17, -1), S(11, 6), S(14, 22), S(-18, 20), 
                S(-52, 20), S(-20, 19), S(-17, 1), S(0, -6), S(1, -7), S(-1, -3), S(0, 6), S(-37, -1), 
                S(-46, 11), S(-24, 16), S(-17, 0), S(-14, 8), S(1, 2), S(-3, 2), S(17, 4), S(-18, -8), 
                S(-45, 15), S(-19, 18), S(-27, 11), S(-22, 16), S(-8, 16), S(11, 6), S(31, 1), S(-25, -8), 
                S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0)
            }, 
            {
                S(-209, -73), S(-153, -22), S(-85, -7), S(-62, -13), S(-6, -16), S(-100, -31), S(-138, -16), S(-139, -111), 
                S(-61, -24), S(-33, -4), S(21, -12), S(22, -5), S(21, -19), S(74, -31), S(-20, -15), S(-3, -45), 
                S(-29, -11), S(14, -4), S(33, 17), S(50, 16), S(92, -3), S(100, -8), S(45, -16), S(8, -23), 
                S(-23, 0), S(-6, 14), S(18, 28), S(46, 29), S(21, 30), S(51, 24), S(3, 14), S(17, -11), 
                S(-36, -1), S(-20, 5), S(3, 28), S(6, 29), S(17, 32), S(11, 18), S(4, 5), S(-27, -7), 
                S(-55, -18), S(-30, -2), S(-8, 1), S(0, 21), S(14, 18), S(0, -1), S(-5, -10), S(-36, -17), 
                S(-60, -26), S(-51, -11), S(-33, -4), S(-12, -2), S(-13, -3), S(-12, -8), S(-30, -19), S(-31, -17), 
                S(-107, -35), S(-39, -36), S(-55, -15), S(-36, -11), S(-33, -11), S(-27, -20), S(-37, -33), S(-78, -38)
            }, 
            {
                S(-26, 17), S(-62, 27), S(-52, 20), S(-97, 35), S(-96, 30), S(-58, 19), S(-28, 11), S(-64, 19), 
                S(-25, 8), S(1, 13), S(-13, 18), S(-26, 17), S(2, 10), S(10, 5), S(-1, 18), S(2, -2), 
                S(-9, 30), S(15, 20), S(22, 20), S(31, 14), S(23, 17), S(54, 22), S(41, 15), S(30, 21), 
                S(-16, 25), S(-3, 31), S(15, 24), S(28, 35), S(24, 29), S(16, 26), S(1, 24), S(-10, 20), 
                S(-11, 16), S(-6, 27), S(0, 33), S(25, 29), S(20, 28), S(0, 29), S(-6, 21), S(-1, 8), 
                S(0, 18), S(8, 24), S(11, 27), S(7, 28), S(11, 32), S(13, 24), S(7, 19), S(13, 8), 
                S(5, 18), S(15, 11), S(16, 4), S(0, 23), S(10, 19), S(21, 11), S(33, 16), S(8, 3), 
                S(-4, 7), S(16, 18), S(4, 16), S(-6, 22), S(-2, 22), S(-8, 30), S(16, 1), S(3, -2)
            }, 
            {
                S(-3, 23), S(-16, 29), S(-13, 36), S(-14, 32), S(5, 24), S(34, 13), S(26, 13), S(39, 11), 
                S(-24, 24), S(-32, 39), S(-6, 38), S(19, 26), S(1, 27), S(35, 13), S(34, 8), S(63, -4), 
                S(-43, 24), S(-19, 25), S(-26, 26), S(-21, 22), S(11, 8), S(22, 3), S(76, -6), S(46, -9), 
                S(-52, 26), S(-41, 22), S(-41, 31), S(-33, 25), S(-32, 12), S(-17, 7), S(-1, 3), S(-1, 0), 
                S(-62, 19), S(-63, 22), S(-54, 24), S(-45, 21), S(-41, 17), S(-48, 15), S(-20, 1), S(-36, 0), 
                S(-61, 13), S(-56, 12), S(-46, 12), S(-38, 12), S(-31, 8), S(-30, 0), S(0, -18), S(-23, -16), 
                S(-60, 8), S(-50, 10), S(-32, 12), S(-30, 12), S(-23, 3), S(-18, -1), S(-3, -12), S(-42, -3), 
                S(-35, 9), S(-33, 10), S(-20, 13), S(-11, 8), S(-7, 1), S(-13, 4), S(-9, -1), S(-28, -9)
            }, 
            {
                S(-22, 49), S(-38, 76), S(-10, 88), S(22, 75), S(31, 71), S(37, 72), S(65, 17), S(6, 65), 
                S(-6, 37), S(-26, 59), S(-27, 99), S(-40, 126), S(-34, 140), S(21, 97), S(6, 80), S(68, 51), 
                S(-1, 35), S(-7, 47), S(-3, 77), S(3, 87), S(15, 107), S(63, 81), S(79, 44), S(76, 43), 
                S(-16, 44), S(-11, 56), S(-11, 67), S(-13, 90), S(-9, 105), S(2, 101), S(11, 91), S(22, 76), 
                S(-10, 42), S(-12, 62), S(-10, 62), S(-6, 87), S(-2, 78), S(0, 75), S(7, 69), S(12, 66), 
                S(-6, 27), S(3, 35), S(1, 54), S(3, 47), S(5, 56), S(12, 55), S(21, 46), S(14, 38), 
                S(1, 26), S(4, 26), S(14, 22), S(21, 24), S(19, 30), S(32, 1), S(34, -20), S(44, -36), 
                S(3, 21), S(3, 19), S(14, 15), S(23, 28), S(18, 15), S(2, 18), S(20, -4), S(15, -9)
            }, 
            {
                S(72, -101), S(44, -42), S(82, -35), S(-46, 7), S(3, -3), S(39, 1), S(67, -6), S(172, -98), 
                S(-59, -2), S(8, 25), S(-32, 35), S(46, 22), S(7, 39), S(26, 52), S(11, 51), S(-16, 19), 
                S(-78, 12), S(49, 32), S(-40, 52), S(-45, 59), S(-28, 62), S(51, 58), S(30, 58), S(-33, 30), 
                S(-57, 0), S(-68, 38), S(-76, 58), S(-125, 71), S(-124, 72), S(-88, 68), S(-81, 58), S(-121, 33), 
                S(-59, -11), S(-64, 24), S(-100, 52), S(-142, 70), S(-143, 70), S(-109, 58), S(-107, 43), S(-140, 25), 
                S(-28, -17), S(-10, 9), S(-76, 35), S(-93, 49), S(-90, 49), S(-83, 41), S(-37, 20), S(-56, 4), 
                S(59, -37), S(14, -6), S(-4, 9), S(-44, 22), S(-45, 25), S(-22, 15), S(28, -5), S(38, -26), 
                S(49, -73), S(87, -55), S(62, -33), S(-49, -10), S(19, -33), S(-19, -13), S(64, -46), S(61, -78)
            }
        };

        const EvalScore knight_mobility[9] = {S(25, -2), S(44, 0), S(54, 6), S(58, 3), S(62, 6), S(61, 13), S(59, 14), S(58, 16), S(60, 12)};
        const EvalScore bishop_mobility[14] = {S(11, -64), S(19, -39), S(28, -32), S(30, -20), S(38, -6), S(45, 7), S(51, 12), S(55, 19), S(56, 27), S(58, 25), S(63, 23), S(67, 23), S(67, 27), S(95, 11)};
        const EvalScore rook_mobility[15] = {S(-13, -24), S(-3, -6), S(1, -3), S(6, 0), S(7, 7), S(15, 8), S(20, 11), S(28, 14), S(33, 23), S(40, 26), S(46, 27), S(52, 29), S(53, 37), S(60, 41), S(63, 37)};
        const EvalScore queen_mobility[28] = {S(-71, -25), S(-70, -84), S(-73, -50), S(-70, -35), S(-67, -35), S(-63, -26), S(-59, -20), S(-61, 1), S(-59, 12), S(-55, 14), S(-55, 27), S(-55, 34), S(-53, 42), S(-52, 49), S(-50, 54), S(-49, 59), S(-46, 64), S(-49, 77), S(-44, 81), S(-42, 82), S(-35, 84), S(-30, 84), S(-28, 84), S(-15, 80), S(-2, 66), S(52, 49), S(64, 43), S(189, -16)};

        const EvalScore stacked_pawn_penalty = S(19, 39);
}